#+TITLE: 3.3 Exercises

* Exercise 3.12
The following procedure for appending lists was introduced in 2.2.1:

#+begin_src scheme :eval never
(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))))
#+end_src

Append forms a new list by successively consing the elements of x onto y.  The procedure append! is similar to append, but it is a mutator rather than a constructor.  It appends the lists by splicing them together, modifying the final pair of x so that its cdr is now y.  (It is an error to call append! with an empty x.)

#+begin_src scheme :eval never
(define (append! x y)
  (set-cdr! (last-pair x) y)
  x)
#+end_src

Here last-pair is a procedure that returns the last pair in its argument:

#+begin_src scheme :eval never
(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))
#+end_src

Consider the interaction

#+begin_example
(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))

z
(a b c d)

(cdr x)
⟨response⟩

(define w (append! x y))

w
(a b c d)

(cdr x)
⟨response⟩
#+end_example

What are the missing ⟨response⟩s?  Draw box-and-pointer diagrams to explain your answer.

** Solution
#+begin_example
(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))

z
$1 = (a b c d)

(cdr x)
$2 = (b)

(define w (append! x y))

w
$3 = (a b c d)

(cdr x)
$4 = (b c d)
#+end_example

*** Box-and-pointer diagram after (define z (append x y))
[[file:annex/3_12-boxes-1.png]]

*** Box-and-pointer diagram after (define w (append! x y))
[[file:annex/3_12-boxes-2.png]]

* Exercise 3.13
Consider the following make-cycle procedure, which uses the last-pair procedure defined in Exercise 3.12:

#+begin_src scheme :eval never
(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)
#+end_src

Draw a box-and-pointer diagram that shows the structure z created by

#+begin_src scheme :eval never
(define z (make-cycle (list 'a 'b 'c)))
#+end_src

What happens if we try to compute (last-pair z)?

** Solution
*** Box-and-pointer diagram
[[file:annex/3_13-boxes.png]]

*** What happens if we try to compute (last-pair z)?
An infinite recursion will happen

* Exercise 3.14
The following procedure is quite useful, although obscure:

#+begin_src scheme :eval never
(define (mystery x)
  (define (loop x y)
    (if (null? x)
        y
        (let ((temp (cdr x)))
          (set-cdr! x y)
          (loop temp x))))
  (loop x '()))
#+end_src

Loop uses the “temporary” variable temp to hold the old value of the cdr of x, since the set-cdr!  on the next line destroys the cdr.  Explain what mystery does in general.  Suppose v is defined by (define v (list 'a 'b 'c 'd)). Draw the box-and-pointer diagram that represents the list to which v is bound. Suppose that we now evaluate (define w (mystery v)). Draw box-and-pointer diagrams that show the structures v and w after evaluating this expression.  What would be printed as the values of v and w?

** Solution
mystery returns a list in the reversed order while changing the original list which becomes a list containing only the first of its original elements.

*** Box-and-pointer diagram after (define v (list 'a 'b 'c 'd))
[[file:annex/3_14-boxes-1.png]]

*** Box-and-pointer diagram after (define w (mystery v))
[[file:annex/3_14-boxes-2.png]]

* Exercise 3.15
Draw box-and-pointer diagrams to explain the effect of set-to-wow! on the structures z1 and z2 above.

** Solution
[[file:annex/3_15-boxes-1.png]]

[[file:annex/3_15-boxes-2.png]]

* Exercise 3.16
Ben Bitdiddle decides to write a procedure to count the number of pairs in any list structure.  “It’s easy,” he reasons.  “The number of pairs in any structure is the number in the car plus the number in the cdr plus one more to count the current pair.”  So Ben writes the following procedure:

#+begin_src scheme :eval never
(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))
#+end_src

Show that this procedure is not correct.  In particular, draw box-and-pointer diagrams representing list structures made up of exactly three pairs for which Ben’s procedure would return 3; return 4; return 7; never return at all.

** Solution
*** Returns 3
[[file:annex/3_16-boxes-1.png]]

*** Returns 4
[[file:annex/3_16-boxes-2.png]]

*** Returns 7
[[file:annex/3_16-boxes-3.png]]

*** Never returns
[[file:annex/3_16-boxes-4.png]]

* Exercise 3.17
Devise a correct version of the count-pairs procedure of Exercise 3.16 that returns the number of distinct pairs in any structure.  (Hint: Traverse the structure, maintaining an auxiliary data structure that is used to keep track of which pairs have already been counted.)

** Solution
#+begin_src scheme
;; set operations
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((eq? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (cons x set))

(define (count-pairs x)
  ((let ((set-of-pairs '()))
     (define (count-pairs-helper x)
       (if (or (not (pair? x))
               (element-of-set? x set-of-pairs))
           0
           (begin (set! set-of-pairs (adjoin-set x set-of-pairs))
                  (+ (count-pairs-helper (car x))
                     (count-pairs-helper (cdr x))
                     1))))
     count-pairs-helper)
   x))

(define a-list '(a))
(define a-list-consed (cons a-list a-list))

(test-equal 3 (count-pairs '(a b c)))

;; would return 4 in the previous exercise
(test-equal 3 (count-pairs (cons a-list-consed '())))

;; would return 7 in the previous exercise
(test-equal 3 (count-pairs (cons a-list-consed a-list-consed)))

(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))

(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

;; would never return
(test-equal 3 (count-pairs (make-cycle '(a b c))))
#+end_src

* Exercise 3.18
Write a procedure that examines a list and determines whether it contains a cycle, that is, whether a program that tried to find the end of the list by taking successive cdrs would go into an infinite loop.  Exercise 3.13 constructed such lists.

** Solution
#+begin_src scheme
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((eq? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (cons x set))

(define (cycle? x)
  (define (cycle-helper x set-of-pairs)
       (cond ((null? x)
              false)
             ((element-of-set? x set-of-pairs)
              true)
             (else
              (cycle-helper (cdr x) (adjoin-set x set-of-pairs)))))
  (cycle-helper x '()))

(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))

(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

(define a-list '(a b c))
(test-assert (not (cycle? a-list)))

;; last pair points back to the second one
(make-cycle (cdr a-list))

(test-assert (cycle? a-list))
#+end_src

* Exercise 3.19
Redo Exercise 3.18 using an algorithm that takes only a constant amount of space.  (This requires a very clever idea.)

** Solution
#+begin_src scheme
(define (cycle? l)
  (define (iter slow fast)
    (cond ((null? fast) false)
          ((eq? slow fast) true)
          (else
           (let ((ahead (cdr fast)))
             (cond ((null? ahead) false)
                   ((eq? slow ahead) true)
                   (else
                    (iter (cdr slow) (cdr ahead))))))))
  (if (null? l)
      false
      (iter l (cdr l))))


(define a-list '(a b c d))
(test-assert (not (cycle? a-list)))

(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))

(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

;; last pair points back to the second one
(make-cycle (cdr a-list))

(test-assert (cycle? a-list))
#+end_src

* TODO Exercise 3.20
Draw environment diagrams to illustrate the evaluation of the sequence of expressions

#+begin_example
(define x (cons 1 2))
(define z (cons x x))

(set-car! (cdr z) 17)

(car x)
17
#+end_example

using the procedural implementation of pairs given above.  (Compare Exercise 3.11.)

* Exercise 3.21
Ben Bitdiddle decides to test the queue implementation described above.  He types in the procedures to the Lisp interpreter and proceeds to try them out:

#+begin_example
(define q1 (make-queue))

(insert-queue! q1 'a)
((a) a)

(insert-queue! q1 'b)
((a b) b)

(delete-queue! q1)
((b) b)

(delete-queue! q1)
(() b)
#+end_example

“It’s all wrong!” he complains.  “The interpreter’s response shows that the last item is inserted into the queue twice.  And when I delete both items, the second b is still there, so the queue isn’t empty, even though it’s supposed to be.”  Eva Lu Ator suggests that Ben has misunderstood what is happening.  “It’s not that the items are going into the queue twice,” she explains.  “It’s just that the standard Lisp printer doesn’t know how to make sense of the queue representation.  If you want to see the queue printed correctly, you’ll have to define your own print procedure for queues.” Explain what Eva Lu is talking about.  In particular, show why Ben’s examples produce the printed results that they do.  Define a procedure print-queue that takes a queue as input and prints the sequence of items in the queue.

** Solution
The standard printer treats pairs that have cdr pointing to another pair as list. Then, our queue structure is printed as a list with two elements whose first element is a list with all elements of the queue and the second one is the last element of the queue. As the second to last element and the rear-ptr point to the same element, it looks like duplication when printed by the standard printer, but it is not. When all elements got removed from the queue, the rear-ptr was still pointing to the last one, because delete-queue! don't touch the rear-ptr but, if we call empty-queue? it will return true and if we call insert-queue the rear-ptr will be updated accordingly.

#+begin_src scheme
(define (display-queue queue)
  (display "<-")
  (display (front-ptr queue))
  (display "-<")
  (newline))
#+end_src

* Exercise 3.22
Instead of representing a queue as a pair of pointers, we can build a queue as a procedure with local state. The local state will consist of pointers to the beginning and the end of an ordinary list.  Thus, the make-queue procedure will have the form

#+begin_src scheme :eval never
(define (make-queue)
  (let ((front-ptr … )
        (rear-ptr … ))
    ⟨definitions of internal procedures⟩
    (define (dispatch m) …)
    dispatch))
#+end_src

Complete the definition of make-queue and provide implementations of the queue operations using this representation.

** Solution
#+begin_src scheme
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (empty?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (insert! item)
      (let ((new-pair (cons item '())))
        (if (empty?)
            (begin
              (set! front-ptr new-pair)
              (set! rear-ptr new-pair))
            (begin
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)))))
    (define (delete!)
      (if (empty?)
          (error "DELETE! called with an empty queue")
          (set! front-ptr (cdr front-ptr))))
    (define (display-queue)
      (display "<-")
      (display front-ptr)
      (display "-<")
      (newline))
    (define (dispatch m)
      (cond ((eq? 'empty? m) empty?)
            ((eq? 'front m) front)
            ((eq? 'insert! m) insert!)
            ((eq? 'delete! m) delete!)
            ((eq? 'display m) display-queue)
            (else (error "Unknown request: QUEUE" m))))
    dispatch))

(define (empty-queue? queue)
  ((queue 'empty?)))
(define (front-queue queue)
  ((queue 'front)))
(define (insert-queue! queue item)
  ((queue 'insert!) item)
  queue)
(define (delete-queue! queue)
  ((queue 'delete!))
  queue)
(define (display-queue queue)
  ((queue 'display)))

(define q (make-queue))
(test-assert (empty-queue? q))
(insert-queue! q 'a)
(insert-queue! q 'b)
(test-equal 'a (front-queue q))
(delete-queue! q)
(test-equal 'b (front-queue q))
(delete-queue! q)
(test-assert (empty-queue? q))
#+end_src

* Exercise 3.23
A deque (“double-ended queue”) is a sequence in which items can be inserted and deleted at either the front or the rear.  Operations on deques are the constructor make-deque, the predicate empty-deque?, selectors front-deque and rear-deque, and mutators front-insert-deque!, rear-insert-deque!, front-delete-deque!, rear-delete-deque!.  Show how to represent deques using pairs, and give implementations of the operations.  All operations should be accomplished in $\theta(1)$ steps.

** Solution
#+begin_src scheme
;; element of the deque ------------------------------------------------
(define (make-element item)
  (cons item (cons '() '())))

(define (element-item element)
  (car element))

(define (next-element element)
  (cddr element))

(define (previous-element element)
  (cadr element))

(define (link-elements! prev next)
  (set-cdr! (cdr prev) next)
  (set-car! (cdr next) prev))

(define (unlink-elements! prev next)
  (set-cdr! (cdr prev) '())
  (set-car! (cdr next) '()))


;; tests
(define e0 (make-element 'a))

(test-assert (eq? '()
                  (next-element e0)))

(test-assert (eq? '()
                  (previous-element e0)))

(test-assert (eq? 'a
                 (element-item e0)))

(define e1 (make-element 'b))
(link-elements! e0 e1)

(test-assert (eq? e1
                  (next-element e0)))

(test-assert (eq? e0
                  (previous-element e1)))

(unlink-elements! e0 e1)

(test-assert (eq? '()
                  (next-element e0)))

(test-assert (eq? '()
                  (previous-element e1)))

;; deque ---------------------------------------------------------------
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))

(define (make-deque) (cons '() '()))
(define (empty-deque? deque)
  (null? (front-ptr deque)))

(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (car (front-ptr deque))))

(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called with an empty deque" deque)
      (car (rear-ptr deque))))

(define (front-insert-deque! deque item)
  (let ((new-pair (make-element item)))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else (link-elements! new-pair (front-ptr deque))
                (set-front-ptr! deque new-pair)
                deque))))

(define (rear-insert-deque! deque item)
  (let ((new-pair (make-element item)))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else (link-elements! (rear-ptr deque) new-pair)
                (set-rear-ptr! deque new-pair)
                deque))))

(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else
         (let ((next (next-element (front-ptr deque))))
           (cond ((null? next)
                  (set-front-ptr! deque '())
                  (set-rear-ptr! deque '()))
                 (else (unlink-elements! (front-ptr deque) next)
                       (set-front-ptr! deque next)))
           deque))))

(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else
         (let ((prev (previous-element (rear-ptr deque))))
           (cond ((null? prev)
                  (set-front-ptr! deque '())
                  (set-rear-ptr! deque '()))
                 (else (unlink-elements! prev (rear-ptr deque))
                       (set-rear-ptr! deque prev)))
           deque))))

;; tests
(define q (make-deque))
(test-assert (empty-deque? q))

(front-insert-deque! q 'b)
(front-insert-deque! q 'a)
(rear-insert-deque! q 'c)

(test-assert (not (empty-deque? q)))

(test-assert (eq? 'a
                  (front-deque q)))
(test-assert (eq? 'c
                  (rear-deque q)))

(front-delete-deque! q)

(test-assert (eq? 'b
                  (front-deque q)))
(test-assert (eq? 'c
                  (rear-deque q)))

(rear-delete-deque! q)
(test-assert (eq? 'b
                  (front-deque q)))
(test-assert (eq? 'b
                  (rear-deque q)))

(rear-delete-deque! q)
(test-assert (empty-deque? q))
#+end_src

* Exercise 3.24
In the table implementations above, the keys are tested for equality using equal? (called by assoc).  This is not always the appropriate test.  For instance, we might have a table with numeric keys in which we don’t need an exact match to the number we’re looking up, but only a number within some tolerance of it. Design a table constructor make-table that takes as an argument a same-key? procedure that will be used to test “equality” of keys. Make-table should return a dispatch procedure that can be used to access appropriate lookup and insert! procedures for a local table.

** Solution
#+begin_src scheme
(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (assoc key records)
      (cond ((null? records) false)
            ((same-key? key (caar records))
             (car records))
            (else (assoc key (cdr records)))))
    (define (lookup key)
      (let ((record (assoc key (cdr local-table))))
        (if record
            (cdr record)
            false)))
    (define (insert! key value)
      (let ((record (assoc key (cdr local-table))))
        (if record
            (set-cdr! record value)
            (set-cdr! local-table
                      (cons (cons key value)
                            (cdr local-table)))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation:
                          TABLE" m))))
    dispatch))

(define (lookup key table)
  ((table 'lookup-proc) key))

(define (insert! key value table)
  ((table 'insert-proc!) key value))

;; tests
(define tbl (make-table eq?))
(test-equal 'ok (insert! 'key 10 tbl))
(test-equal 10 (lookup 'key tbl))
#+end_src

* Exercise 3.25
Generalizing one- and two-dimensional tables, show how to implement a table in which values are stored under an arbitrary number of keys and different values may be stored under different numbers of keys.  The lookup and insert! procedures should take as input a list of keys used to access the table.

** Solution
#+begin_src scheme
(define (assoc key records)
  (cond ((null? records) #f)
        ((equal? key (caar records))
         (car records))
        (else (assoc key (cdr records)))))

(define (lookup key table)
  (let ((record (assoc key (cdr table))))
    (if record
        (cdr record)
        #f)))

(define (insert! key value table)
  (let ((record (assoc key (cdr table))))
    (if record
        (set-cdr! record value)
        (set-cdr! table
                  (cons (cons key value)
                        (cdr table)))))
  'ok)

(define (make-table)
  (list '*table*))

(define tbl (make-table))

(define (table? table)
  (and (pair? table)
       (eq? '*table* (car table))))

(define (deep-lookup keys value)
  (if (null? keys)
      value
      (let ((record (lookup (car keys) value)))
        (display record)
        (newline)
        (if record
            (deep-lookup (cdr keys) record)
            #f))))

(define (deep-insert! keys value table)
  (define (deep-insert-helper! key keys table)
    (let ((record (lookup key table)))
      (cond ((not record)
             (if (null? keys)
                 (insert! key value table)
                 (let ((new-table (make-table)))
                   (insert! key new-table table)
                   (deep-insert-helper! (car keys) (cdr keys) new-table))))
            ((table? record)
             (if (null? keys)
                 (insert! key value record)
                 (deep-insert-helper! (car keys) (cdr keys) record)))
            (else (error "INSERT into a not table element")))))
  (if (null? keys)
        (error "INSERT cannot insert null keys")
        (deep-insert-helper! (car keys) (cdr keys) table)))
#+end_src

* Exercise 3.26
To search a table as implemented above, one needs to scan through the list of records.  This is basically the unordered list representation of 2.3.3.  For large tables, it may be more efficient to structure the table in a different manner.  Describe a table implementation where the (key, value) records are organized using a binary tree, assuming that keys can be ordered in some way (e.g., numerically or alphabetically).  (Compare Exercise 2.66 of Chapter 2.)

** Solution
One could just use the same binary tree representation of 2.3 using a key value pair as an entry of the tree.  For that we would need an comparator function, 2.3 used '=', that would receive two pairs and compare their keys.

* Exercise 3.27
Memoization (also called  tabulation) is a technique that enables a procedure to record, in a local table, values that have previously been computed.  This technique can make a vast difference in the performance of a program.  A memoized procedure maintains a table in which values of previous calls are stored using as keys the arguments that produced the values.  When the memoized procedure is asked to compute a value, it first checks the table to see if the value is already there and, if so, just returns that value.  Otherwise, it computes the new value in the ordinary way and stores this in the table.  As an example of memoization, recall from 1.2.2 the exponential process for computing Fibonacci numbers:

#+begin_src scheme :eval never
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
#+end_src

The memoized version of the same procedure is

#+begin_src scheme :eval never
(define memo-fib
  (memoize
   (lambda (n)
     (cond ((= n 0) 0)
           ((= n 1) 1)
           (else
            (+ (memo-fib (- n 1))
               (memo-fib (- n 2))))))))
#+end_src

where the memoizer is defined as

#+begin_src scheme :eval never
(define (memoize f)
  (let ((table (make-table)))
    (lambda (x)
      (let ((previously-computed-result
             (lookup x table)))
        (or previously-computed-result
            (let ((result (f x)))
              (insert! x result table)
              result))))))
#+end_src

Draw an environment diagram to analyze the computation of (memo-fib 3). Explain why memo-fib computes the $n^{th}$ Fibonacci number in a number of steps proportional to $n$.  Would the scheme still work if we had simply defined memo-fib to be (memoize fib)?

** Solution
Environment Diagram:

[[file:annex/3_27.png]]

Simply defining memo-fib to be (memoize fib) wouldn't get the expected result though, since it would memoize only the final result and not the partial results.

* Exercise 3.28
Define an or-gate as a primitive function box.  Your or-gate constructor should be similar to and-gate.

** Solution
#+begin_src scheme
(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((new-value
           (logical-or (get-signal a1)
                        (get-signal a2))))
      (after-delay
       or-gate-delay
       (lambda ()
         (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)
#+end_src

* Exercise 3.29
Another way to construct an or-gate is as a compound digital logic device, built from and-gates and inverters.  Define a procedure or-gate that accomplishes this.  What is the delay time of the or-gate in terms of and-gate-delay and inverter-delay?

** Solution
#+begin_src scheme
(define (or-gate a1 a2 output)
  (let ((a1-inv (make-wire))
        (a2-inv (make-wire))
        (out-inv (make-wire)))
    (inverter a1 a1-inv)
    (inverter a2 a2-inv)
    (and-gate a1-inv a2-inv out-inv)
    (inverter out-inv output)
    'ok))
#+end_src

The delay time of this gate is 2 * inverter-delay + and-delay.


* Exercise 3.30
Figure 3.27 shows a ripple-carry adder formed by stringing together n full-adders. This is the simplest form of parallel adder for adding two n-bit binary numbers.  The inputs $A_1, A_2, A_3, \cdots, A_n$ and $B_1, B_2, B_3, \cdots, B_n$ are the two binary numbers to be added (each $A_k$ and $B_k$ is a 0 or a 1).  The circuit generates $S_1, S_2, S_3, \cdots, S_n$, the $n$ bits of the sum, and $C$, the carry from the addition.  Write a procedure ripple-carry-adder that generates this circuit.  The procedure should take as arguments three lists of $n$ wires each - the $A_k$, the $B_k$, and the $S_k$ - and also another wire $C$.  The major drawback of the ripple-carry adder is the need to wait for the carry signals to propagate. What is the delay needed to obtain the complete output from an n-bit ripple-carry adder, expressed in terms of the delays for and-gates, or-gates, and inverters?

** Solution
#+begin_src scheme
(define (ripple-carry-adder A B S c-out)
  (define (adder-builder A B S c-out)
    (if (not (null? A))
        (let ((c-in (make-wire)))
          (adder-builder (cdr A) (cdr B) (cdr S) c-in)
          (full-adder (car A) (car B) c-in (car S) c-out))))
  (adder-builder A B S c-out)
  'ok)
#+end_src

Let $fa\mbox{-}s\mbox{-}delay$ be the delay to update the SUM wire of the $full\mbox{-}adder$ circuit and $fa\mbox{-}c\mbox{-}delay$ be the delay to update the $C_{out}$ same circuit.  Also, let $ha\mbox{-}s\mbox{-}delay$ be the delay to update S wire of the $half\mbox{-}adder$ circuit and $ha\mbox{-}c\mbox{-}delay$ the delay to update the C wire of the same circuit.  Since the computation of each $full\mbox{-}adder$ depends on the computation of the carry-on bit of the previous $full\mbox{-}adder$, the delay needed to get the complete output, for n > 1, is:

\begin{align*}
rca\mbox{-}delay = & max(fa\mbox{-}s\mbox{-}delay, fa\mbox{-}c\mbox{-}delay) \\
& + max((n-1) fa\mbox{-}c\mbox{-}delay, fa\mbox{-}s\mbox{-}delay)
\end{align*}

From the circuits is possible to derive the $full\mbox{-}adder$ delays in terms of $half\mbox{-}adder$ delays:

\begin{align*}
fa\mbox{-}s\mbox{-}delay &= 2ha\mbox{-}s\mbox{-}delay \\

fa\mbox{-}c\mbox{-}delay &= max(ha\mbox{-}c\mbox{-}delay, ha\mbox{-}s\mbox{-}delay + ha\mbox{-}c\mbox{-}delay) + or\mbox{-}delay
\end{align*}

Since $ha\mbox{-}c\mbox{-}delay < ha\mbox{-}s\mbox{-}delay + ha\mbox{-}c\mbox{-}delay$, then:

\begin{equation*}
fa\mbox{-}c\mbox{-}delay = ha\mbox{-}s\mbox{-}delay + ha\mbox{-}c\mbox{-}delay + or\mbox{-}delay
\end{equation*}

And the $half\mbox{-}adder$ delays:

\begin{align*}
ha\mbox{-}s\mbox{-}delay &= max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + and\mbox{-}delay \\

ha\mbox{-}c\mbox{-}delay &= and\mbox{-}delay
\end{align*}

Now is possible to show that $fa\mbox{-}s\mbox{-}delay > fa\mbox{-}c\mbox{-}delay$:

\begin{align*}
2ha\mbox{-}s\mbox{-}delay &> ha\mbox{-}s\mbox{-}delay + ha\mbox{-}c\mbox{-}delay + or\mbox{-}delay \\

ha\mbox{-}s\mbox{-}delay &> ha\mbox{-}c\mbox{-}delay + or\mbox{-}delay \\

max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + and\mbox{-}delay &> and\mbox{-}delay + or\mbox{-}delay \\

max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) &> or\mbox{-}delay
\end{align*}

given $inverter\mbox{-}delay > 0$. Then, Simplify $rca\mbox{-}delay$:

\begin{align*}
rca\mbox{-}delay = fa\mbox{-}s\mbox{-}delay + max((n-1)fa\mbox{-}c\mbox{-}delay, fa\mbox{-}s\mbox{-}delay)
\end{align*}

After substitutions:

\begin{align*}
fa\mbox{-}s\mbox{-}delay =& 2max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + 2and\mbox{-}delay \\

fa\mbox{-}c\mbox{-}delay =& max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + 2and\mbox{-}delay + or\mbox{-}delay \\

rca\mbox{-}delay =& 2max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + 2and\mbox{-}delay \\
                  & + max((n-1)(max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + 2and\mbox{-}delay + or\mbox{-}delay), \\
                  & \qquad \qquad 2max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + 2and\mbox{-}delay)
\end{align*}

Assuming $(n-1)fa\mbox{-}c\mbox{-}delay > fa\mbox{-}s\mbox{-}delay$:

\begin{align*}
rca\mbox{-}delay =& 2 max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + 2 and\mbox{-}delay \\
                 & + (n-1)(max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + 2 and\mbox{-}delay + or\mbox{-}delay) \\

rca\mbox{-}delay =& (n+1)(max(and\mbox{-}delay, or\mbox{-}delay + inverter\mbox{-}delay) + 2and\mbox{-}delay) + (n-1)or\mbox{-}delay
\end{align*}

* Exercise 3.31
The internal procedure accept-action-procedure! defined in make-wire specifies that when a new action procedure is added to a wire, the procedure is immediately run. Explain why this initialization is necessary.  In particular, trace through the half-adder example in the paragraphs above and say how the system’s response would differ if we had defined accept-action-procedure! as

#+begin_src scheme :eval never
(define (accept-action-procedure! proc)
  (set! action-procedures
        (cons proc action-procedures)))
#+end_src

** Solution
Without the initialization the circuits would not produce correct outputs unless some input change occurred after the wiring.

* TODO Exercise 3.32
The procedures to be run during each time segment of the agenda are kept in a queue.  Thus, the procedures for each segment are called in the order in which they were added to the agenda (first in, first out).  Explain why this order must be used.  In particular, trace the behavior of an and-gate whose inputs change from 0, 1 to 1, 0 in the same segment and say how the behavior would differ if we stored a segment’s procedures in an ordinary list, adding and removing procedures only at the front (last in, first out).

* Exercise 3.33
Using primitive multiplier, adder, and constant constraints, define a procedure averager that takes three connectors a, b, and c as inputs and establishes the constraint that the value of c is the average of the values of a and b.

** Solution
#+begin_src scheme
(define (averager a b c)
  (let ((s (make-connector))
        (u (make-connector)))
    (adder a b s)
    (multiplier s u c)
    (constant 0.5 u)
    'ok))
#+end_src

* Exercise 3.34
Louis Reasoner wants to build a squarer, a constraint device with two terminals such that the value of connector b on the second terminal will always be the square of the value a on the first terminal.  He proposes the following simple device made from a multiplier:

#+begin_src scheme :eval never
(define (squarer a b) (multiplier a a b))
#+end_src

There is a serious flaw in this idea.  Explain.

** Solution
Squarer cannot calculate the square root of b, since the multiplier in which it is based needs two out of three values.  When we set b, is not enough to solve the two other outputs.


* Exercise 3.35
Ben Bitdiddle tells Louis that one way to avoid the trouble in Exercise 3.34 is to define a squarer as a new primitive constraint.  Fill in the missing portions in Ben’s outline for a procedure to implement such a constraint:

#+begin_src scheme :eval never
(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
            (error "square less than 0:
                    SQUARER"
                   (get-value b))
            <alternative1>)
        <alternative2>))
  (define (process-forget-value) <body1>)
  (define (me request) <body2>)
  ⟨rest of definition⟩
  me)
#+end_src

** Solution
#+begin_src scheme
(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
            (error "square less than 0:
                    SQUARER"
                   (get-value b))
            (set-value! a
                        (sqrt (get-value b))
                        me))
        (if (has-value? a)
            (set-value! b
                        (* (get-value a) (get-value a))
                        me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else (error "Unknown request:
                        SQUARER" request))))
  (connect a me)
  (connect b me)
  me)
#+end_src

* TODO Exercise 3.36
Suppose we evaluate the following sequence of expressions in the global environment:

#+begin_src scheme :eval never
(define a (make-connector))
(define b (make-connector))
(set-value! a 10 'user)
#+end_src

At some time during evaluation of the set-value!, the following expression from the connector’s local procedure is evaluated:

#+begin_src scheme :eval never
(for-each-except
  setter inform-about-value constraints)
#+end_src

Draw an environment diagram showing the environment in which the above expression is evaluated.


* Exercise 3.37:
The celsius-fahrenheit-converter procedure is cumbersome when compared with a more expression-oriented style of definition, such as

#+begin_src scheme :eval never
(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))

(define C (make-connector))
(define F (celsius-fahrenheit-converter C))
#+end_src

Here c+, c*, etc. are the “constraint” versions of the arithmetic operations.  For example, c+ takes two connectors as arguments and returns a connector that is related to these by an adder constraint:

#+begin_src scheme :eval never
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
#+end_src

Define analogous procedures c-, c*, c/, and cv (constant value) that enable us to define compound constraints as in the converter example above.

** Solution
#+begin_src scheme
(define (c- x y)
  (let ((z (make-connector)))
    (adder z y x)
    z))

(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))

(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier z y x)
    z))

(define (cv c)
  (let ((z (make-connector)))
    (constant c z)
    z))
#+end_src
