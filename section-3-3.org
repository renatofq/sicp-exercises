#+TITLE: 3.3 Exercises

* Exercise 3.12
The following procedure for appending lists was introduced in 2.2.1:

#+begin_src scheme :eval never
(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))))
#+end_src

Append forms a new list by successively consing the elements of x onto y.  The procedure append! is similar to append, but it is a mutator rather than a constructor.  It appends the lists by splicing them together, modifying the final pair of x so that its cdr is now y.  (It is an error to call append! with an empty x.)

#+begin_src scheme :eval never
(define (append! x y)
  (set-cdr! (last-pair x) y)
  x)
#+end_src

Here last-pair is a procedure that returns the last pair in its argument:

#+begin_src scheme :eval never
(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))
#+end_src

Consider the interaction

#+begin_example
(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))

z
(a b c d)

(cdr x)
⟨response⟩

(define w (append! x y))

w
(a b c d)

(cdr x)
⟨response⟩
#+end_example

What are the missing ⟨response⟩s?  Draw box-and-pointer diagrams to explain your answer.

** Solution
#+begin_example
(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))

z
$1 = (a b c d)

(cdr x)
$2 = (b)

(define w (append! x y))

w
$3 = (a b c d)

(cdr x)
$4 = (b c d)
#+end_example

*** Box-and-pointer diagram after (define z (append x y))
[[file:annex/3_12-boxes-1.png]]

*** Box-and-pointer diagram after (define w (append! x y))
[[file:annex/3_12-boxes-2.png]]

* Exercise 3.13
Consider the following make-cycle procedure, which uses the last-pair procedure defined in Exercise 3.12:

#+begin_src scheme :eval never
(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)
#+end_src

Draw a box-and-pointer diagram that shows the structure z created by

#+begin_src scheme :eval never
(define z (make-cycle (list 'a 'b 'c)))
#+end_src

What happens if we try to compute (last-pair z)?

** Solution
*** Box-and-pointer diagram
[[file:annex/3_13-boxes.png]]

*** What happens if we try to compute (last-pair z)?
An infinite recursion will happen

* Exercise 3.14
The following procedure is quite useful, although obscure:

#+begin_src scheme :eval never
(define (mystery x)
  (define (loop x y)
    (if (null? x)
        y
        (let ((temp (cdr x)))
          (set-cdr! x y)
          (loop temp x))))
  (loop x '()))
#+end_src

Loop uses the “temporary” variable temp to hold the old value of the cdr of x, since the set-cdr!  on the next line destroys the cdr.  Explain what mystery does in general.  Suppose v is defined by (define v (list 'a 'b 'c 'd)). Draw the box-and-pointer diagram that represents the list to which v is bound. Suppose that we now evaluate (define w (mystery v)). Draw box-and-pointer diagrams that show the structures v and w after evaluating this expression.  What would be printed as the values of v and w?

** Solution
mystery returns a list in the reversed order while changing the original list which becomes a list containing only the first of its original elements.

*** Box-and-pointer diagram after (define v (list 'a 'b 'c 'd))
[[file:annex/3_14-boxes-1.png]]

*** Box-and-pointer diagram after (define w (mystery v))
[[file:annex/3_14-boxes-2.png]]

* Exercise 3.15
Draw box-and-pointer diagrams to explain the effect of set-to-wow! on the structures z1 and z2 above.

** Solution
[[file:annex/3_15-boxes-1.png]]

[[file:annex/3_15-boxes-2.png]]

* Exercise 3.16
Ben Bitdiddle decides to write a procedure to count the number of pairs in any list structure.  “It’s easy,” he reasons.  “The number of pairs in any structure is the number in the car plus the number in the cdr plus one more to count the current pair.”  So Ben writes the following procedure:

#+begin_src scheme :eval never
(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))
#+end_src

Show that this procedure is not correct.  In particular, draw box-and-pointer diagrams representing list structures made up of exactly three pairs for which Ben’s procedure would return 3; return 4; return 7; never return at all.

** Solution
*** Returns 3
[[file:annex/3_16-boxes-1.png]]

*** Returns 4
[[file:annex/3_16-boxes-2.png]]

*** Returns 7
[[file:annex/3_16-boxes-3.png]]

*** Never returns
[[file:annex/3_16-boxes-4.png]]

* Exercise 3.17
Devise a correct version of the count-pairs procedure of Exercise 3.16 that returns the number of distinct pairs in any structure.  (Hint: Traverse the structure, maintaining an auxiliary data structure that is used to keep track of which pairs have already been counted.)

** Solution
#+begin_src scheme
;; set operations
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((eq? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (cons x set))

(define (count-pairs x)
  ((let ((set-of-pairs '()))
     (define (count-pairs-helper x)
       (if (or (not (pair? x))
               (element-of-set? x set-of-pairs))
           0
           (begin (set! set-of-pairs (adjoin-set x set-of-pairs))
                  (+ (count-pairs-helper (car x))
                     (count-pairs-helper (cdr x))
                     1))))
     count-pairs-helper)
   x))

(define a-list '(a))

(test-equal 3 (count-pairs '(a b c)))

;; would return 4 in the previous exercise
(test-equal 3 (count-pairs (cons (cons a-list a-list) '())))

;; would return 7 in the previous exercise
(test-equal 3 (count-pairs (let ((temp (cons a-list a-list)))
                             (cons temp temp))))

(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))

(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

;; would never return
(test-equal 3 (count-pairs (make-cycle '(a b c))))
#+end_src
