#+TITLE: 3.5 Exercises

* Exercise 3.50
Complete the following definition, which generalizes stream-map to allow procedures that take multiple arguments, analogous to map in 2.2.1,  Footnote 78.

#+begin_src scheme :eval never
(define (stream-map proc . argstreams)
  (if (<??> (car argstreams))
      the-empty-stream
      (<??>
       (apply proc (map <??> argstreams))
       (apply stream-map
              (cons proc
                    (map <??>
                         argstreams))))))
#+end_src

** Solution
#+begin_src scheme
(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
       (apply proc (map car-stream argstreams))
       (apply stream-map
              (cons proc
                    (map cdr-stream
                         argstreams))))))
#+end_src

* Exercise 3.51
In order to take a closer look at delayed evaluation, we will use the following procedure, which simply returns its argument after printing it:

#+begin_src scheme :eval never
(define (show x)
  (display-line x)
  x)
#+end_src

What does the interpreter print in response to evaluating each expression in the following sequence?

#+begin_src scheme
(define x
  (stream-map
   show
   (stream-enumerate-interval 0 10)))

(stream-ref x 5)
(stream-ref x 7)
#+end_src

** Solution
At x definition the interpreter prints 0, since the car of the stream is already defined, and there's no stream comprehension.  At (stream-ref x 5) it prints the numbers 1 to 5 and returns 5.  0 is not printed because the value is already evaluated and is not evaluated again.  (stream-ref x 7) it prints 6 and 7 and returns 7.  Again the previously evaluated elements of the stream don't get evaluated anew.

* Exercise 3.52
Consider the sequence of expressions

#+begin_src scheme :eval never
(define sum 0)

(define (accum x)
  (set! sum (+ x sum))
  sum)

(define seq
  (stream-map
   accum
   (stream-enumerate-interval 1 20)))

(define y (stream-filter even? seq))

(define z
  (stream-filter
   (lambda (x)
     (= (remainder x 5) 0)) seq))

(stream-ref y 7)
(display-stream z)
#+end_src

What is the value of sum after each of the above expressions is evaluated?  What is the printed response to evaluating the stream-ref and display-stream expressions?  Would these responses differ if we had implemented (delay ⟨exp⟩) simply as (lambda () ⟨exp⟩) without using the optimization provided by memo-proc?  Explain.

** Solution
After (define seq ...) the value of sum will 1 because stream-map will evaluate stream-car of stream-enumerate-interval immediately.  The nth element of seq is the sum of its predecessors.

After (define y ...), stream-filter will evaluate seq until it finds an value that satisfies the predicate even?, and the first even value of seq is 6, so sum will be 6.

After (define z ...) stream-filter will evaluate seq until it finds an value that is divisible by 5, which is 10, making the value of sum 10.

When the interpreter evaluates (stream-ref y 7), it will evaluate seq until it finds the 8th, because stream-ref indexes from 0, even value of seq which is 136.

(display-stream z) will force the evaluation of seq to the end, making the value of sum 210, and will print the sequence 10, 15, 45, 55, 105, 120, 190, 210.

Without memoization the elements of seq would be re-added producing different values and seq would be unstable, producing different values for the nth value depending on the historic of usage.

* Exercise 3.53
Without running the program, describe the elements of the stream defined by

#+begin_src scheme :eval never
(define s (cons-stream 1 (add-streams s s)))
#+end_src

** Solution
This sequence is the sequence of powers of two described by $2^n$ with $n$ starting from 0.

* Exercise 3.54
Define a procedure mul-streams, analogous to add-streams, that produces the elementwise product of its two input streams.  Use this together with the stream of integers to complete the following definition of the stream whose $n^{th}$ element (counting from 0) is $n + 1$ factorial:

#+begin_src scheme :eval never
(define factorials
  (cons-stream 1 (mul-streams <??> <??>)))
#+end_src

** Solution
#+begin_src scheme
(define (integers-starting-from n)
  (cons-stream n (integers-starting-from (+ n 1))))

(define (mul-streams s0 s1)
  (stream-map * s0 s1))

(define factorials
  (cons-stream 1 (mul-streams (integers-starting-from 2)
                              factorials)))

(test-equal 120 (stream-ref factorials 4))
#+end_src

* Exercise 3.55
Define a procedure partial-sums that takes as argument a stream $S$ and returns the stream whose elements are $S_0, S_0 + S_1, S_0 + S_1 + S_2, \cdots$.  For example, (partial-sums integers) should be the stream $1, 3, 6, 10, 15, \cdots$.

** Solution
#+begin_src scheme
;; from the book
(define (integers-starting-from n)
  (cons-stream
   n (integers-starting-from (+ n 1))))
(define integers (integers-starting-from 1))

(define (add-streams s1 s2)
  (stream-map + s1 s2))

;; actual solution
(define (partial-sums s)
  (cons-stream
   (stream-car s)
   (add-streams (stream-cdr s) (partial-sums s))))

(test-equal
  '(1 3 6 10 15)
  (stream-take 5 (partial-sums integers)))
#+end_src

* Exercise 3.56
A famous problem, first raised by R. Hamming, is to enumerate, in ascending order with no repetitions, all positive integers with no prime factors other than 2, 3, or 5.  One obvious way to do this is to simply test each integer in turn to see whether it has any factors other than 2, 3, and 5.  But this is very inefficient, since, as the integers get larger, fewer and fewer of them fit the requirement.  As an alternative, let us call the required stream of numbers S and notice the following facts about it.

+ S begins with 1.

+ The elements of (scale-stream S 2) are also elements of S.

+ The same is true for (scale-stream S 3) and (scale-stream S 5).

+ These are all the elements of S.

Now all we have to do is combine elements from these sources.  For this we define a procedure merge that combines two ordered streams into one ordered result stream, eliminating repetitions:

#+begin_src scheme :eval never
(define (merge s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (cond ((< s1car s2car)
                  (cons-stream
                   s1car
                   (merge (stream-cdr s1)
                          s2)))
                 ((> s1car s2car)
                  (cons-stream
                   s2car
                   (merge s1
                          (stream-cdr s2))))
                 (else
                  (cons-stream
                   s1car
                   (merge
                    (stream-cdr s1)
                    (stream-cdr s2)))))))))
#+end_src

Then the required stream may be constructed with merge, as follows:

#+begin_src scheme :eval never
(define S (cons-stream 1 (merge <??> <??>)))
#+end_src

Fill in the missing expressions in the places marked <??> above.

** Solution
#+begin_src scheme
(define S (cons-stream 1 (merge (scale-stream S 2)
                                (merge (scale-stream S 3)
                                       (scale-stream S 5)))))
#+end_src

* Exercise 3.57
How many additions are performed when we compute the $n^{th}$ Fibonacci number using the definition of fibs based on the add-streams procedure?  Show that the number of additions would be exponentially greater if we had implemented (delay <exp>) simply as (lambda () <exp>), without using the optimization provided by the memo-proc procedure described in 3.5.1.

** Solution
The number of sums to compute the $n^{th}$ Fibonacci number is $n-2$, since the first two numbers are given and memoization prevents any element of the sequence from being calculated more than once.

*** TODO show that the number of additions would be exponential without memoization.

* Exercise 3.58
Give an interpretation of the stream computed by the following procedure:

#+begin_src scheme :eval never
(define (expand num den radix)
  (cons-stream
   (quotient (* num radix) den)
   (expand (remainder (* num radix) den)
           den
           radix)))
#+end_src

(Quotient is a primitive that returns the integer quotient of two integers.)  What are the successive elements produced by (expand 1 7 10)?  What is produced by (expand 3 8 10)?

** Solution
The expand procedure returns a stream with the resulting digits of the division of num by den at base radix.  If s is the resulting sequence of expand for any num, den and radix; (quotient (stream-car s) radix) is the integral part of the result, (remainder (stream-car s) radix) is the first fractional digit and the subsequent elements of s are the rest of the fractional digits.

+ (expand 1 7 10) will produce the sequence $1, 4, 2, 8, 5, 7, 1, 4, 2, 8, 5, 7, 1, 4, \cdots$ which corresponds to $1/7 = 0.\overline{142857}$.

+ (expand 3 8 10) will produce the sequence $3, 7, 5, 0, 0, 0, 0, \cdots$ which corresponds to $3/8 = 0.375$.


* TODO Exercise 3.59
In 2.5.3 we saw how to implement a polynomial arithmetic system representing polynomials as lists of terms.  In a similar way, we can work with  power series, such as

\begin{align*}
e^x &= 1 + x + \frac{1}{2}x^2 + \frac{1}{3 \cdot 2}x^3 + \frac{1}{4 \cdot 3 \cdot 2}x^4 + \cdots, \\
\cos x &= 1 - \frac{1}{2}x^2 + \frac{1}{4 \cdot 3 \cdot 2}x^4 - \cdots, \\
\sin x &= x - \frac{1}{3 \cdot 2}x^3 + \frac{1}{5 \cdot 4 \cdot 3 \cdot 2}x^5 - \cdots
\end{align*}

represented as infinite streams.  We will represent the series $a_0 + a_1x + a_2x^2 + a_3x^3 + \cdots$ as the stream whose elements are the coefficients $a_0, a_1, a_2, a_3, \cdots$.

1. The integral of the series $a_0 + a_1x + a_2x^2 + a_3x^3 + \cdots$ is the series

   \begin{equation*}
   c + a_0x + \frac{1}{2}a_1x^2 + \frac{1}{3}a_2x^3 + \frac{1}{4}a_3x^4
       + \cdots,
   \end{equation*}

   where $c$ is any constant.  Define a procedure integrate-series that takes as input a stream $a_0, a_1, a_2, \cdots$ representing a power series and returns the stream $a_0, \frac{1}{2}a_1, \frac{1}{3}a_2, \cdots$ of coefficients of the non-constant terms of the integral of the series.  (Since the result has no constant term, it doesn't represent a power series; when we use integrate-series, we will cons on the appropriate constant.)

2. The function $x \mapsto e^x$ is its own derivative.  This implies that $e^x$ and the integral of $e^x$ are the same series, except for the constant term, which is $e^0 = 1$.  Accordingly, we can generate the series for $e^x$ as

   #+begin_src scheme :eval never
   (define exp-series
     (cons-stream
      1 (integrate-series exp-series)))
   #+end_src

   Show how to generate the series for sine and cosine, starting from the facts that the derivative of sine is cosine and the derivative of cosine is the negative of sine:

   #+begin_src scheme :eval never
   (define cosine-series
     (cons-stream 1 <??>))

   (define sine-series
     (cons-stream 0 <??>))
   #+end_src


* TODO Exercise 3.60
With power series represented as streams of coefficients as in Exercise 3.59, adding series is implemented by add-streams.  Complete the definition of the following procedure for multiplying series:

#+begin_src scheme :eval never
(define (mul-series s1 s2)
  (cons-stream <??> (add-streams <??> <??>)))
#+end_src

You can test your procedure by verifying that $\sin^2 x + \cos^2 x = 1$, using the series from Exercise 3.59.


* TODO Exercise 3.61
Let $S$ be a power series (Exercise 3.59) whose constant term is 1.  Suppose we want to find the power series $1/S$, that is, the series $X$ such that $SX = 1$. Write $S = 1 + S_R$ where $S_R$ is the part of $S$ after the constant term.  Then we can solve for $X$ as follows:

\begin{align*}
S \cdot X &= 1, \\
(1 + S_R) \cdot X &= 1, \\
X + S_R \cdot X &= 1, \\
X &= 1 - S_R \cdot X.
\end{align*}

In other words, $X$ is the power series whose constant term is 1 and whose higher-order terms are given by the negative of $S_R$ times $X$.  Use this idea to write a procedure invert-unit-series that computes $1/S$ for a power series $S$ with constant term 1.  You will need to use mul-series from Exercise 3.60.


* TODO Exercise 3.62
Use the results of Exercise 3.60 and Exercise 3.61 to define a procedure div-series that divides two power series.  Div-series should work for any two series, provided that the denominator series begins with a nonzero constant term.  (If the denominator has a zero constant term, then div-series should signal an error.)  Show how to use div-series together with the result of Exercise 3.59 to generate the power series for tangent.

* Exercise 3.63
Louis Reasoner asks why the sqrt-stream procedure was not written in the following more straightforward way, without the local variable guesses:

#+begin_src scheme :eval never
(define (sqrt-stream x)
  (cons-stream
   1.0
   (stream-map (lambda (guess)
                 (sqrt-improve guess x))
               (sqrt-stream x))))
#+end_src

Alyssa P. Hacker replies that this version of the procedure is considerably less efficient because it performs redundant computation.  Explain Alyssa’s answer.  Would the two versions still differ in efficiency if our implementation of delay used only (lambda () <exp>) without using the optimization provided by memo-proc (3.5.1)?

** Solution
The solution proposed by Louis Reasoner creates new stream object when the evaluation of stream-cdr happens.  This new stream cannot benefit from the memoization of the original stream.  Now, to get nth element of the streams is necessary to evaluate stream-cdr n-1 times, that means evaluating improve-guess (n-1)*(n-1) time, or O(n^2).

Without memoization there would be no difference in efficiency since to get the nth element the previous n-1 would be computed again, and the same for each of the previous elements, yielding O(n^2) again.


* Exercise 3.64
Write a procedure stream-limit that takes as arguments a stream and a number (the tolerance).  It should examine the stream until it finds two successive elements that differ in absolute value by less than the tolerance, and return the second of the two elements.  Using this, we could compute square roots up to a given tolerance by

#+begin_src scheme :eval never
(define (sqrt x tolerance)
  (stream-limit (sqrt-stream x) tolerance))
#+end_src

** Solution
#+begin_src scheme
(define (stream-limit s tolerance)
  (let ((current (stream-car s))
        (next (stream-car (stream-cdr s))))
    (if (> tolerance
           (abs (- current next)))
           next
           (stream-limit (stream-cdr s) tolerance))))

;;; definitions
(define sqrt-improve
  (lambda (guess x)
    (average guess (/ x guess))))

(define (sqrt-stream x)
  (define guesses
     (cons-stream
      1.0
      (stream-map (lambda (guess)
                    (sqrt-improve guess x))
                  guesses)))
  guesses)

(define (sqrt x tolerance)
  (stream-limit (sqrt-stream x) tolerance))

(test-approximate 1.4142 (sqrt 2 0.0001) 0.0001)
#+end_src


* Exercise 3.65
Use the series

\begin{equation*}
\ln 2 = 1 - \frac{1}{2} + \frac{1}{3} - \frac{1}{4} + \cdots
\end{equation*}

to compute three sequences of approximations to the natural logarithm of 2, in the same way we did above for $\pi$.  How rapidly do these sequences converge?

** Solution
#+begin_src scheme
(define (add-streams s1 s2)
  (stream-map + s1 s2))

(define (partial-sums s)
  (cons-stream
   (stream-car s)
   (add-streams (stream-cdr s) (partial-sums s))))

(define (ln2-summands n)
  (cons-stream
   (/ 1.0 n)
   (stream-map - (ln2-summands (+ n 1)))))

(define ln2-stream
  (partial-sums (ln2-summands 1)))

(define (euler-transform s)
  (let ((s0 (stream-ref s 0))
        (s1 (stream-ref s 1))
        (s2 (stream-ref s 2)))
    (cons-stream
     (- s2 (/ (square (- s2 s1))
              (+ s0 (* -2 s1) s2)))
     (euler-transform (stream-cdr s)))))

(use-modules (ice-9 format))
(map (lambda (a0 b0 c0)
       (format #t "| ~11,9f | ~11,9f | ~11,9f |~%" a0 b0 c0))
     (stream-take 10 ln2-stream)
     (stream-take 10 (euler-transform ln2-stream))
     (stream-take 10 (euler-transform (euler-transform ln2-stream))))
#+end_src

Approximation of $\ln 2$ to 9 decimals: 0.693147181

#+RESULTS:
| 1.000000000 | 0.700000000 | 0.693277311 |
| 0.500000000 | 0.690476190 | 0.693105756 |
| 0.833333333 | 0.694444444 | 0.693163341 |
| 0.583333333 | 0.692424242 | 0.693139901 |
| 0.783333333 | 0.693589744 | 0.693150829 |
| 0.616666667 | 0.692857143 | 0.693145196 |
| 0.759523810 | 0.693347339 | 0.693148332 |
| 0.634523810 | 0.693003342 | 0.693146476 |
| 0.745634921 | 0.693253968 | 0.693147631 |
| 0.645634921 | 0.693065751 | 0.693146882 |


* Exercise 3.66
Examine the stream (pairs integers integers). Can you make any general comments about the order in which the pairs are placed into the stream? For example, approximately how many pairs precede the pair (1, 100)? the pair (99, 100)? the pair (100, 100)? (If you can make precise mathematical statements here, all the better. But feel free to give more qualitative answers if you find yourself getting bogged down.)

** Solution
Let f(m, n) be the function that maps the pair (m, n) to the corresponding index the pair in the described sequence. Then we have:

f(1, 1) = 1
f(1, n) = 2*(n - 1)
f(m, n) = 2*f(m-1, n-1) + 1

*** TODO finish


* Exercise 3.67
Modify the pairs procedure so that (pairs integers integers) will produce the stream of all pairs of integers $(i, j)$ (without the condition $i \leq j$).  Hint: You will need to mix in an additional stream.

** Solution
#+begin_src scheme
(define (full-pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (interleave
     (stream-map (lambda (x)
                   (list (stream-car s) x))
                 (stream-cdr t))
     (stream-map (lambda (x)
                   (list x (stream-car t)))
                 (stream-cdr s)))
    (full-pairs (stream-cdr s) (stream-cdr t)))))
#+end_src


* Exercise 3.68
Louis Reasoner thinks that building a stream of pairs from three parts is unnecessarily complicated. Instead of separating the pair $(S_0, T_0)$ from the rest of the pairs in the first row, he proposes to work with the whole first row, as follows:

#+begin_src scheme :eval never
(define (pairs s t)
  (interleave
   (stream-map
    (lambda (x)
      (list (stream-car s) x))
    t)
   (pairs (stream-cdr s)
          (stream-cdr t))))
#+end_src

Does this work?  Consider what happens if we evaluate (pairs integers integers) using Louis’s definition of pairs.


** Solution
This would produce an infinite loop since pairs is defined in terms of itself but there are no delayed evaluation.


* Exercise 3.69
Write a procedure triples that takes three infinite streams, $S$, $T$, and $U$, and produces the stream of triples $(S_i, T_j, U_k)$ such that $i \leq j \leq k$.  Use triples to generate the stream of all Pythagorean triples of positive integers, i.e., the triples $(i, j, k)$ such that $i \leq j$ and $i^2 + j^2 = k^2$.

** Solution
#+begin_src scheme
;; previous definitions
(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream
       (stream-car s1)
       (interleave s2 (stream-cdr s1)))))

(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x)
                  (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

;; actual solution
(define (triplets s t u)
  (cons-stream
   (list (stream-car s) (stream-car t) (stream-car u))
   (interleave
    (interleave
     (stream-map (lambda (pair) (cons (stream-car s) pair))
                 (stream-map (lambda (x) (list (stream-car t) x))
                             (stream-cdr u)))
     (stream-map (lambda (pair) (cons (stream-car s) pair))
                 (pairs (stream-cdr t) (stream-cdr u))))
    (triplets (stream-cdr s) (stream-cdr t) (stream-cdr u)))))


(define pythagorean-triplets
  (stream-filter (lambda (triplet)
                   (let ((a (car   triplet))
                         (b (cadr  triplet))
                         (c (caddr triplet)))
                     (= (+ (* a a) (* b b)) (* c c))))
   (triplets integers integers integers)))

(test-equal
  '((3 4 5) (6 8 10) (5 12 13) (9 12 15) (8 15 17))
  (stream-take 5 pythagorean-triplets))
#+end_src


* Exercise 3.70
It would be nice to be able to generate streams in which the pairs appear in some useful order, rather than in the order that results from an ad hoc interleaving process.  We can use a technique similar to the merge procedure of Exercise 3.56, if we define a way to say that one pair of integers is "less than" another.  One way to do this is to define a "weighting function" $W(i, j)$ and stipulate that $(i_1, j_1)$ is less than $(i_2, j_2)$ if $W(i_1, j_1) < W(i_2, j_2)$.  Write a procedure merge-weighted that is like merge, except that merge-weighted takes an additional argument weight, which is a procedure that computes the weight of a pair, and is used to determine the order in which elements should appear in the resulting merged stream.  Using this, generalize pairs to a procedure weighted-pairs that takes two streams, together with a procedure that computes a weighting function, and generates the stream of pairs, ordered according to weight.  Use your procedure to generate

1. the stream of all pairs of positive integers $(i, j)$ with $i \leq j$ ordered according to the sum $i + j$,

2. the stream of all pairs of positive integers $(i, j)$ with $i \leq j$, where neither $i$ nor $j$ is divisible by 2, 3, or 5, and the pairs are ordered according to the sum $2_i + 3_j + 5_{ij}$.

** Solution
#+begin_src scheme
(define (merge-weighted w s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (cond ((<= (w s1car) (w s2car))
                  (cons-stream
                   s1car
                   (merge-weighted
                    w
                    (stream-cdr s1)
                    s2)))
                 ((> (w s1car) (w s2car))
                  (cons-stream
                   s2car
                   (merge-weighted
                    w
                    s1
                    (stream-cdr s2)))))))))

(define (weighted-pairs w s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (merge-weighted
    w
    (stream-map
     (lambda (x) (list (stream-car s) x))
     (stream-cdr t))
    (weighted-pairs
     w
     (stream-cdr s)
     (stream-cdr t)))))

(define (integer-pairs-weighted-by w)
  (weighted-pairs w integers integers))

;; 1.
(test-equal
  '((1 1) (1 2) (1 3) (2 2) (1 4) (2 3))
  (stream-take
   6
   (integer-pairs-weighted-by
    (lambda (p)
      (+ (car p) (cadr p))))))

;; 2. quick and dirty approach
(test-equal
  '((1 1) (1 7) (1 11) (1 13) (1 17) (1 19) (1 23) (1 29) (1 31) (7 7))
  (stream-take
   10
   (stream-filter
    (lambda (p)
      (and (not (divides? 5 (car p)))
           (not (divides? 5 (cadr p)))))
    (stream-filter
     (lambda (p)
       (and (not (divides? 3 (car p)))
            (not (divides? 3 (cadr p)))))
     (stream-filter
      (lambda (p)
        (and (not (divides? 2 (car p)))
             (not (divides? 2 (cadr p)))))
      (integer-pairs-weighted-by
       (lambda (p)
         (let ((i (car p))
               (j (cadr p)))
           (+ (* 2 i) (* 3 j) (* 5 i j))))))))))

;; 2. basic operations approach
(define (partial f c)
  (lambda (x)
    (f c x)))

(define (weigth-of-pair p)
  (let ((i (car p))
               (j (cadr p)))
           (+ (* 2 i) (* 3 j) (* 5 i j))))

(define (divides-none divisor l)
  (cond ((null? l) #t)
        ((divides? divisor (car l)) #f)
        (else (divides-none divisor (cdr l)))))

(define specified-stream
  (fold-left
   (lambda (stream pred) (stream-filter pred stream))
   (integer-pairs-weighted-by weigth-of-pair)
   (list (partial divides-none 2)
         (partial divides-none 3)
         (partial divides-none 5))))

(test-equal
  '((1 1) (1 7) (1 11) (1 13) (1 17) (1 19) (1 23) (1 29) (1 31) (7 7))
  (stream-take 10 specified-stream))
#+end_src


* Exercise 3.71
Numbers that can be expressed as the sum of two cubes in more than one way are sometimes called Ramanujan numbers, in honor of the mathematician Srinivasa Ramanujan. Ordered streams of pairs provide an elegant solution to the problem of computing these numbers.  To find a number that can be written as the sum of two cubes in two different ways, we need only generate the stream of pairs of integers $(i, j)$ weighted according to the sum $i^3 + j^3$ (see Exercise 3.70), then search the stream for two consecutive pairs with the same weight.  Write a procedure to generate the Ramanujan numbers.  The first such number is 1,729.  What are the next five?

** Solution
#+begin_src scheme
;; from 3.70
(define (merge-weighted w s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (cond ((<= (w s1car) (w s2car))
                  (cons-stream
                   s1car
                   (merge-weighted
                    w
                    (stream-cdr s1)
                    s2)))
                 ((> (w s1car) (w s2car))
                  (cons-stream
                   s2car
                   (merge-weighted
                    w
                    s1
                    (stream-cdr s2)))))))))

(define (weighted-pairs w s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (merge-weighted
    w
    (stream-map
     (lambda (x) (list (stream-car s) x))
     (stream-cdr t))
    (weighted-pairs
     w
     (stream-cdr s)
     (stream-cdr t)))))

;; actual solution
(define (sum-of-cubes arglist)
  (apply + (map cube arglist)))

(define (ramanujan-numbers)
  (let ((sum-of-cubes-stream
         (stream-map
          sum-of-cubes
          (weighted-pairs sum-of-cubes integers integers))))
  (stream-map
   (lambda (consecutive-sums) (car consecutive-sums))
   (stream-filter
    (lambda (consecutive-sums)
      (= (car consecutive-sums)
         (cdr consecutive-sums)))
    (stream-map
     (lambda (current next) (cons current next))
     sum-of-cubes-stream
     (stream-cdr sum-of-cubes-stream))))))

(test-equal
  '(1729 4104 13832 20683 32832 39312)
  (stream-take 6 (ramanujan-numbers)))
#+end_src


* TODO Exercise 3.72
In a similar way to Exercise 3.71 generate a stream of all numbers that can be written as the sum of two squares in three different ways (showing how they can be so written).

* TODO Exercise 3.73
We can model electrical circuits using streams to represent the values of currents or voltages at a sequence of times.  For instance, suppose we have an  RC circuit consisting of a resistor of resistance $R$ and a capacitor of capacitance $C$ in series. The voltage response $v$ of the circuit to an injected current $i$ is determined by the formula in Figure 3.33, whose structure is shown by the accompanying signal-flow diagram.

Write a procedure RC that models this circuit.  RC should take as inputs the values of $R$, $C$, and $dt$ and should return a procedure that takes as inputs a stream representing the current $i$ and an initial value for the capacitor voltage $v_0$ and produces as output the stream of voltages $v$.  For example, you should be able to use RC to model an RC circuit with $R = 5$ ohms, $C = 1$ farad, and a 0.5-second time step by evaluating (define RC1 (RC 5 1 0.5)).  This defines RC1 as a procedure that takes a stream representing the time sequence of currents and an initial capacitor voltage and produces the output stream of voltages.


* TODO Exercise 3.74
Alyssa P. Hacker is designing a system to process signals coming from physical sensors.  One important feature she wishes to produce is a signal that describes the  zero crossings of the input signal.  That is, the resulting signal should be $+1$ whenever the input signal changes from negative to positive, $-1$ whenever the input signal changes from positive to negative, and $0$ otherwise.  (Assume that the sign of a $0$ input is positive.)  For example, a typical input signal with its associated zero-crossing signal would be


| $\cdots$ | 1 | 2 | 1.5 | 1 | 0.5 | -0.1 | -2 | -3 | -2 | -0.5 | 0.2 | 3 | 4 | $\cdots$ |
| $\cdots$ | 0 | 0 |   0 | 0 |   0 |   -1 |  0 |  0 |  0 |    0 |   1 | 0 | 0 | $\cdots$ |


In Alyssa’s system, the signal from the sensor is represented as a stream sense-data and the stream zero-crossings is the corresponding stream of zero crossings.  Alyssa first writes a procedure sign-change-detector that takes two values as arguments and compares the signs of the values to produce an appropriate $0, 1, or -1$.  She then constructs her zero-crossing stream as follows:

#+begin_src scheme :eval never
(define (make-zero-crossings
         input-stream last-value)
  (cons-stream
   (sign-change-detector
    (stream-car input-stream)
    last-value)
   (make-zero-crossings
    (stream-cdr input-stream)
    (stream-car input-stream))))

(define zero-crossings
  (make-zero-crossings sense-data 0))
#+end_src

Alyssa’s boss, Eva Lu Ator, walks by and suggests that this program is approximately equivalent to the following one, which uses the generalized version of stream-map from Exercise 3.50:

#+begin_src scheme :eval never
(define zero-crossings
  (stream-map sign-change-detector
              sense-data
              <expression>))
#+end_src

Complete the program by supplying the indicated <expression>.


* TODO Exercise 3.75
Unfortunately, Alyssa’s zero-crossing detector in Exercise 3.74 proves to be insufficient, because the noisy signal from the sensor leads to spurious zero crossings.  Lem E.  Tweakit, a hardware specialist, suggests that Alyssa smooth the signal to filter out the noise before extracting the zero crossings.  Alyssa takes his advice and decides to extract the zero crossings from the signal constructed by averaging each value of the sense data with the previous value.  She explains the problem to her assistant, Louis Reasoner, who attempts to implement the idea, altering Alyssa’s program as follows:

#+begin_src scheme :eval never
(define (make-zero-crossings
         input-stream last-value)
  (let ((avpt
         (/ (+ (stream-car input-stream)
               last-value)
            2)))
    (cons-stream
     (sign-change-detector avpt last-value)
     (make-zero-crossings
      (stream-cdr input-stream) avpt))))
#+end_src

This does not correctly implement Alyssa’s plan.  Find the bug that Louis has installed and fix it without changing the structure of the program.  (Hint: You will need to increase the number of arguments to make-zero-crossings.)


* TODO Exercise 3.76
Eva Lu Ator has a criticism of Louis’s approach in Exercise 3.75.  The program he wrote is not modular, because it intermixes the operation of smoothing with the zero-crossing extraction.  For example, the extractor should not have to be changed if Alyssa finds a better way to condition her input signal.  Help Louis by writing a procedure smooth that takes a stream as input and produces a stream in which each element is the average of two successive input stream elements. Then use smooth as a component to implement the zero-crossing detector in a more modular style.


* TODO Exercise 3.77
The integral procedure used above was analogous to the “implicit” definition of the infinite stream of integers in 3.5.2.  Alternatively, we can give a definition of integral that is more like integers-starting-from (also in 3.5.2):

#+begin_src scheme :eval never
(define (integral
         integrand initial-value dt)
  (cons-stream
   initial-value
   (if (stream-null? integrand)
       the-empty-stream
       (integral
        (stream-cdr integrand)
        (+ (* dt (stream-car integrand))
           initial-value)
        dt))))
#+end_src

When used in systems with loops, this procedure has the same problem as does our original version of integral.  Modify the procedure so that it expects the integrand as a delayed argument and hence can be used in the solve procedure shown above.

* TODO Exercise 3.78
Consider the problem of designing a signal-processing system to study the homogeneous second-order linear differential equation

\begin{equation*}
\frac{d^2y}{dt^2} - a \frac{dy}{dt} - by = 0.
\end{equation*}

The output stream, modeling $y$, is generated by a network that contains a loop. This is because the value of $d^2 y/dt^2$ depends upon the values of $y$ and $dy/dt$ and both of these are determined by integrating $d^2y/dt^2$.  The diagram we would like to encode is shown in Figure 3.35.  Write a procedure solve-2nd that takes as arguments the constants $a, b, and dt$ and the initial values $y_0$ and $dy_0$ for $y$ and $dy/d t$ and generates the stream of successive values of $y$.


* TODO Exercise 3.79
Generalize the solve-2nd procedure of Exercise 3.78 so that it can be used to solve general second-order differential equations $d^2y/dt^2 = f(dy/dt, y)$.


* TODO Exercise 3.80
A  series RLC circuit consists of a resistor, a capacitor, and an inductor connected in series, as shown in Figure 3.36. If $R$, $L$, and $C$ are the resistance, inductance, and capacitance, then the relations between voltage $(v)$ and current $(i)$ for the three components are described by the equations

\begin{align*}
v_R &= i_RR,\\
v_L &= L \frac{di_L}{dt},\\
i_C &= C \frac{dv_C}{dt},
\end{align*}

and the circuit connections dictate the relations

\begin{align*}
i_R &= i L= −i C,\\
v C &= v L+v R.
\end{align*}

Combining these equations shows that the state of the circuit (summarized by $v_C$, the voltage across the capacitor, and $i_L$, the current in the inductor) is described by the pair of differential equations

\begin{align*}
\frac{dv_C}{dt} &= -\frac{i_L}{C},\\
\frac{di_L}{dt} &= \frac{1}{L}v_C - \frac{R}{L} i_L.
\end{align*}

The signal-flow diagram representing this system of differential equations is shown in Figure 3.37.

Write a procedure RLC that takes as arguments the parameters $R$, $L$, and $C$ of the circuit and the time increment $dt$.  In a manner similar to that of the $RC$ procedure of Exercise 3.73, RLC should produce a procedure that takes the initial values of the state variables, $v_{C_0}$ and $i_{L_0}$, and produces a pair (using cons) of the streams of states $v_C$ and $i_L$.  Using RLC, generate the pair of streams that models the behavior of a series RLC circuit with $R=1$ ohm, $C=0.2$ farad, $L=1$ henry, $dt = 0.1$ second, and initial values $i_{L_0}=0$ amps and $v_{C_0}=10$ volts.


* Exercise 3.81
Exercise 3.6 discussed generalizing the random-number generator to allow one to reset the random-number sequence so as to produce repeatable sequences of “random” numbers.  Produce a stream formulation of this same generator that operates on an input stream of requests to generate a new random number or to reset the sequence to a specified value and that produces the desired stream of random numbers.  Don’t use assignment in your solution.

** Solution
#+begin_src scheme
;; realy bad, lazy as hell, RNG
(define random-init 71)
(define (rand-update x)
  (* 37 x))

(define (list->stream lst)
  (if (null? lst)
      the-empty-stream
      (cons-stream (car lst)
                   (list->stream (cdr lst)))))

;; not sure if this function can be should be called fold
(define (stream-fold op value stream)
  (if (stream-null? stream)
      value
      (let ((new-value (op value (stream-car stream))))
        (cons-stream
         new-value
         (stream-fold
          op
          new-value
          (stream-cdr stream))))))


(define actions '(reset generate generate generate generate))

(define random-numbers
  (stream-fold
   (lambda (last-number action)
     (cond ((eq? 'generate action)
            (rand-update last-number))
           ((eq? 'reset action)
            (rand-update random-init))
           (else (error "Invalid action for rand" action))))
   random-init
   (list->stream actions)))

(test-equal (stream-take 5 random-numbers)
            (stream-take 5 random-numbers))
#+end_src


* TODO Exercise 3.82
Redo Exercise 3.5 on Monte Carlo integration in terms of streams.  The stream version of estimate-integral will not have an argument telling how many trials to perform.  Instead, it will produce a stream of estimates based on successively more trials.
