(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (empty?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (insert! item)
      (let ((new-pair (cons item '())))
        (if (empty?)
            (begin
              (set! front-ptr new-pair)
              (set! rear-ptr new-pair))
            (begin
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)))))
    (define (delete!)
      (if (empty?)
          (error "DELETE! called with an empty queue")
          (set! front-ptr (cdr front-ptr))))
    (define (display-queue)
      (display "<-")
      (display front-ptr)
      (display "-<")
      (newline))
    (define (dispatch m)
      (cond ((eq? 'empty? m) empty?)
            ((eq? 'front m) front)
            ((eq? 'insert! m) insert!)
            ((eq? 'delete! m) delete!)
            ((eq? 'display m) display-queue)
            (else (error "Unknown request: QUEUE" m))))
    dispatch))

(define (empty-queue? queue)
  ((queue 'empty?)))
(define (front-queue queue)
  ((queue 'front)))
(define (insert-queue! queue item)
  ((queue 'insert!) item)
  queue)
(define (delete-queue! queue)
  ((queue 'delete!))
  queue)
(define (display-queue queue)
  ((queue 'display)))
