#+TITLE: Section 1.2 Exercises

* Exercise 1.9
Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.
#+begin_src scheme :eval never
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
#+end_src

Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

** Solution
*** First procedure
#+begin_example
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
#+end_example

*** Second procedure
#+begin_example
(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 7)
(+ (dec 2) (inc 7))
(+ 1 8)
(+ (dec 1) (inc 8))
(+ 0 9)
9
#+end_example

* Exercise 1.10
The following procedure computes a mathematical function called Ackermann’s function.
#+begin_src scheme :eval never
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
#+end_src

What are the values of the following expressions?
#+begin_src scheme :session :eval never
(A 1 10)
(A 2 4)
(A 3 3)
#+end_src

Consider the following procedures, where A is the procedure defined above:
#+begin_src scheme :eval never
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
#+end_src

Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes $5n^2$.

** Solution
#+begin_example
> (A 1 10)
$1 = 1024
> (A 2 4)
$2 = 65536
> (A 3 3)
$3 = 65536
#+end_example

$f(n) = 2n$

$g(n) = 2^n$

$h(n) = 2^{h(n-1)}$

* Exercise 1.11
A function f is defined by the rule that $f(n)=n$ if $n<3$ and $f(n)=f(n-1)+2f(n-2)+3f(n-3)$ if $n \ge 3$. Write a procedure that computes f by means of a recursive process. Write a procedure that computes f by means of an iterative process.

** Solution
*** Recursive
#+name: recursive
#+begin_src scheme
(define (f n)
  (if (< n 3)
      n
      (+
       (f (- n 1))
       (* 2 (f (- n 2)))
       (* 3 (f (- n 3))))))

(test-equal 0 (f 0))
(test-equal 1 (f 1))
(test-equal 2 (f 2))
(test-equal 4 (f 3))
(test-equal 11 (f 4))
(test-equal 25 (f 5))
#+end_src

*** Iterative
#+name: iterative
#+begin_src scheme
(define (f n)
  (define (f-step n-1 n-2 n-3)
    (+ n-1 (* 2 n-2) (* 3 n-3)))
  (define (f-iter n-1 n-2 n-3 count)
    (if (= count 0)
        n-1
        (f-iter (f-step n-1 n-2 n-3) n-1 n-2 (- count 1))))
  (if (< n 3)
      n
      (f-iter 2 1 0 (- n 2))))

(test-equal 0 (f 0))
(test-equal 1 (f 1))
(test-equal 2 (f 2))
(test-equal 4 (f 3))
(test-equal 11 (f 4))
(test-equal 25 (f 5))
#+end_src

* Exercise 1.12
The following pattern of numbers is called Pascal’s triangle.

#+begin_example
         1
       1   1
     1   2   1
   1   3   3   1
 1   4   6   4   1
       . . .
#+end_example

The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a procedure that computes elements of Pascal’s triangle by means of a recursive process.

** Solution
#+begin_src scheme
(define (pascal-triangle r k)
  (if (or (= r 1) (< k 2) (>= k r))
       1
       (+
        (pascal-triangle (- r 1) (- k 1))
        (pascal-triangle (- r 1) k))))

(test-equal 6 (pascal-triangle 5 3))
#+end_src

* Exercise 1.13
Prove that $Fib(n)$ is the closest integer to $\varphi^n/\sqrt{5}$ where $\varphi = (1 + \sqrt{5})/2$. Hint: Let $\psi = (1 - \sqrt{5})/2$. Use induction and the definition of the Fibonacci numbers (see 1.2.2) to prove that $Fib(n) = (\varphi^n - \psi^n) / \sqrt{5}$.

** Solution
Let $\varphi = \frac{1+\sqrt{5}}{2}$ and $\psi = \frac{1-\sqrt{5}}{2}$. If $Fib(n)$ is the nearest integer to $\frac{\varphi^n}{\sqrt{5}}$, the following inequality holds true:

\[ \left| Fib(n) - \frac{\varphi^n}{\sqrt{5}} \right| < \frac{1}{2} \]

Proposition:
\[ Fib(n) = \frac{\varphi^n}{\sqrt{5}} - \frac{\psi^n}{\sqrt{5}} \]

Demonstration:
\[
\frac{\varphi^n - \psi^n}{\sqrt{5}} =
\frac{\varphi^{n-1} - \psi^{n-1}}{\sqrt{5}} +
\frac{\varphi^{n-2} - \psi^{n-2}}{\sqrt{5}}
\]
\[
\varphi^n - \psi^n =
\varphi^{n-1} - \psi^{n-1} + \varphi^{n-2} - \psi^{n-2}
\]
\[
\varphi^n - \psi^n =
\frac{\varphi^n}{\varphi} - \frac{\psi^n}{\psi} +
\frac{\varphi^n}{\varphi^2} - \frac{\psi^n}{\psi^2}
\]
\[
\varphi^n - \psi^n =
\varphi^n \left(\frac{1}{\varphi} + \frac{1}{\varphi^2}\right) -
\psi^n \left(\frac{1}{\psi} + \frac{1}{\psi^2}\right)
\]
\[
\varphi^n - \psi^n =
\varphi^n \left( \frac{\varphi + 1}{\varphi^2} \right) -
\psi^n \left( \frac{\psi + 1}{\psi^2} \right)
\]

Since $\varphi^2 = \varphi + 1$:
\[
\varphi^2 = \varphi + 1
\]
\[
\left(\frac{1+\sqrt{5}}{2}\right)^2 = \frac{1+\sqrt{5}}{2} + 1
\]
\[
\frac{\left( 1+\sqrt{5} \right)^2}{4} = \frac{1+\sqrt{5}}{2} + 1
\]
\[
\left( 1+\sqrt{5} \right)^2 = 4\left(\frac{1+\sqrt{5}}{2} + 1 \right)
\]
\[
\left( 1+\sqrt{5} \right)^2 = 2 \left( 1+\sqrt{5} \right) + 4
\]
\[
\left( 1+\sqrt{5} \right)^2 = 2 + 2\sqrt{5} + 4
\]
\[
\left( 1+\sqrt{5} \right)^2 = 6 + 2\sqrt{5}
\]
\[
1 + 2\sqrt{5} + 5 = 6 + 2\sqrt{5}
\]
\[
6 + 2\sqrt{5} = 6 + 2\sqrt{5}
\]
\[
3 + \sqrt{5} = 3 + \sqrt{5}
\]

And $\psi^2 = \psi + 1$:
\[
\psi^2 = \psi + 1
\]
\[
\left(\frac{1-\sqrt{5}}{2}\right)^2 = \frac{1-\sqrt{5}}{2} + 1
\]
\[
\frac{\left( 1-\sqrt{5} \right)^2}{4} = \frac{1-\sqrt{5}}{2} + 1
\]
\[
\left( 1-\sqrt{5} \right)^2 = 4\left(\frac{1-\sqrt{5}}{2} + 1 \right)
\]
\[
\left( 1-\sqrt{5} \right)^2 = 2 \left( 1-\sqrt{5} \right) + 4
\]
\[
\left( 1-\sqrt{5} \right)^2 = 2 - 2\sqrt{5} + 4
\]
\[
\left( 1-\sqrt{5} \right)^2 = 6 - 2\sqrt{5}
\]
\[
1 - 2\sqrt{5} + 5 = 6 - 2\sqrt{5}
\]
\[
6 - 2\sqrt{5} = 6 - 2\sqrt{5}
\]
\[
3 - \sqrt{5} = 3 - \sqrt{5}
\]

The proposition is true. Substituting $Fib(n)$ in the original inequality:
\[
\left| \frac{\varphi^n}{\sqrt{5}} -
\frac{\psi^n}{\sqrt{5}}  -
\frac{\varphi^n}{\sqrt{5}} \right|
< \frac{1}{2}
\]
\[
\left| - \frac{\psi^n}{\sqrt{5}} \right| < \frac{1}{2}
\]

As $-1 < \psi < 0$, so $-1 < \psi^n < 1$ for any $n \in \mathbb{N} > 0$, and $\sqrt{5} > 2$, therefore $Fib(n)$ is the nearest integer to $\frac{\varphi^n}{\sqrt{5}}$.

* Exercise 1.14
Draw the tree illustrating the process generated by the count-change procedure of 1.2.2 in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?

** Solution
Evaluation tree:

#+INCLUDE: "1_14-tree-graph.dot" src dot :file 1_14-tree-graph.png

* Exercise 1.15
The sine of an angle (specified in radians) can be computed by making use of the approximation $\sin{x} \approx x$ if $x$ is sufficiently small, and the trigonometric identity

\[ \sin{x} = 3\sin{\frac{x}{3}} - 4\sin^3{\frac{x}{3}} \]

to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered “sufficiently small” if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:

#+begin_src scheme :eval never
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
   (if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))
#+end_src

1. How many times is the procedure p applied when (sine 12.15) is evaluated?
2. What is the order of growth in space and number of steps (as a function of a) used by the process generated by the sine procedure when (sine a) is evaluated?

** Solution
The procedure p will be applied 5 times when (sine 12.15) is evaluated (See evaluation annex). As for the order of growth, this function is a linear recursion, so it means that the space required to compute has the same order of growth of the number of steps needed to finish. The procedure evolves by successively applying the transformation $a \leftarrow \frac{a}{3}$ until $a < 0.1$. This can be expressed as the product:

\[ a\prod_{1}^{n} \frac{1}{3} < 0.1 \]

\[ 0.1 > \frac{a}{3^n} \]

Where n is the number of steps. Solving for n:

\[ 0.1(3^n) > a \]
\[ 3^n > \frac{a}{0.1} \]
\[ \log_{3}{3^n} > \log_{3}{\left(\frac{a}{0.1}\right)} \]
\[ n > \log_{3}{a} - \log_{3}{0.1} \]

Applying 12.15 $\log_{3}{12.15} - \log_{3}{0.1} \approx 4.369$ where 5 is the smallest integer that solves the inequality.

Applying $\theta$, the order of growth is $\theta(\log{a})$.

* Exercise 1.16
Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does fast-expt. (Hint: Using the observation that $(b^{n/2})^2 = (b^2)^{n/2}$, keep, along with the exponent n and the base b, an additional state variable a, and define the state transformation in such a way that the product ab^n is unchanged from state to state. At the beginning of the process a is taken to be 1, and the answer is given by the value of a at the end of the process. In general, the technique of defining an invariant quantity that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)

** Solution
#+begin_src scheme
(define (expt b n)
  (define (even? n) (= 0 (remainder n 2)))
  (define (expt-iter b n a)
    (cond ((= n 0) a)
          ((even? n) (expt-iter (* b b) (/ n 2) a))
          (else  (expt-iter b (- n 1) (* a b)))))
  (expt-iter b n 1))

(test-equal 1 (expt 10 0))
(test-equal 7 (expt 7 1))
(test-equal 9 (expt 3 2))
(test-equal 125 (expt 5 3))
(test-equal 625 (expt 5 4))
(test-equal 32 (expt 2 5))
(test-equal 729 (expt 3 6))
(test-equal 78125 (expt 5 7))
(test-equal 256 (expt 2 8))
(test-equal 19683 (expt 3 9))
#+end_src

* Exercise 1.17
The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the expt procedure:

#+begin_src scheme :eval never
(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b 1)))))
#+end_src

This algorithm takes a number of steps that is linear in b. Now suppose we include, together with addition, operations double, which doubles an integer, and halve, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to fast-expt that uses a logarithmic number of steps.

** Solution
#+begin_src scheme
(define (halve n) (/ n 2))
(define (multi a b)
    (cond ((= b 0) 0)
          ((even? b) (multi (+ a a) (halve b)))
          (else  (+ a (multi a (- b 1) )))))

(test-equal 0 (multi 10 0))
(test-equal 7 (multi 7 1))
(test-equal 6 (multi 3 2))
(test-equal 15 (multi 5 3))
(test-equal 20 (multi 5 4))
(test-equal 10 (multi 2 5))
(test-equal 18 (multi 3 6))
(test-equal 35 (multi 5 7))
(test-equal 16 (multi 2 8))
(test-equal 27 (multi 3 9))
#+end_src

* Exercise 1.18
Using the results of Exercise 1.16 and Exercise 1.17, devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.

** Solution
#+begin_src scheme
(define (multi a b)
  (define (halve n) (/ n 2))
  (define (multi-iter a b c)
    (cond ((= b 0) c)
          ((even? b) (multi-iter (+ a a) (halve b) c))
          (else  (multi-iter a (- b 1) (+ c a)))))
  (multi-iter a b 0))

(test-equal 0 (multi 10 0))
(test-equal 7 (multi 7 1))
(test-equal 6 (multi 3 2))
(test-equal 15 (multi 5 3))
(test-equal 20 (multi 5 4))
(test-equal 10 (multi 2 5))
(test-equal 18 (multi 3 6))
(test-equal 35 (multi 5 7))
(test-equal 16 (multi 2 8))
(test-equal 27 (multi 3 9))
#+end_src

* Exercise 1.19
There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables a and b in the fib-iter process of 1.2.2: $a \leftarrow a + b$ and $b \leftarrow a$. Call this transformation T, and observe that applying T over and over again n times, starting with 1 and 0, produces the pair $Fib(n + 1)$ and $Fib(n)$. In other words, the Fibonacci numbers are produced by applying $T^n$, the nth power of the transformation T, starting with the pair $(1, 0)$. Now consider T to be the special case of $p = 0$ and $q = 1$ in a family of transformations $T_{pq}$, where $T_{pq}$ transforms the pair $(a, b)$ according to $a \leftarrow bq + aq + ap$ and $b \leftarrow bp + aq$. Show that if we apply such a transformation $T_{pq}$ twice, the effect is the same as using a single transformation $T_{p'q'}$ of the same form, and compute $p'$ and $q'$ in terms of p and q. This gives us an explicit way to square these transformations, and thus we can compute $T^n$ using successive squaring, as in the fast-expt procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps:

#+begin_src scheme :eval never
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0)
         b)
        ((even? count)
         (fib-iter a
                   b
                   ⟨??⟩  ;compute p'
                   ⟨??⟩  ;compute q'
                   (/ count 2)))
        (else
         (fib-iter (+ (* b q)
                      (* a q)
                      (* a p))
                   (+ (* b p)
                      (* a q))
                   p
                   q
                   (- count 1)))))
#+end_src

** Solution
#+begin_src scheme
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   (+ (* p p) (* q q))
                   (+ (* q q) (* 2 p q))
                   (/ count 2)))
        (else
         (fib-iter (+ (* b q)
                      (* a q)
                      (* a p))
                   (+ (* b p)
                      (* a q))
                   p
                   q
                   (- count 1)))))

(test-equal 1  (fib 1))
(test-equal 1  (fib 2))
(test-equal 2  (fib 3))
(test-equal 3  (fib 4))
(test-equal 5  (fib 5))
(test-equal 8  (fib 6))
(test-equal 13 (fib 7))
(test-equal 610 (fib 15))
(test-equal 1548008755920 (fib 60))
(test-equal 2880067194370816120 (fib 90))
#+end_src

* Exercise 1.20
The process that a procedure generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative gcd procedure given above. Suppose we were to interpret this procedure using normal-order evaluation, as discussed in 1.1.5. (The normal-order-evaluation rule for if is described in Exercise 1.5.) Using the substitution method (for normal order), illustrate the process generated in evaluating (gcd 206 40) and indicate the remainder operations that are actually performed. How many remainder operations are actually performed in the normal-order evaluation of (gcd 206 40)? In the applicative-order evaluation?

** Solution
For normal-order evaluation the number of remainder operations executed is 18. For applicative-order evaluation, 4.

* Exercise 1.21
Use the smallest-divisor procedure to find the smallest divisor of each of the following numbers: 199, 1999, 19999.

** Solution
#+begin_example
> (smallest-divisor 199)
$1 = 199
> (smallest-divisor 1999)
$2 = 1999
> (smallest-divisor 19999)
$3 = 7
#+end_example

* Exercise 1.22
Most Lisp implementations include a primitive called runtime that returns an integer that specifies the amount of time the system has been running (measured, for example, in microseconds). The following timed-prime-test procedure, when called with an integer n, prints n and checks to see if n is prime. If n is prime, the procedure prints three asterisks followed by the amount of time used in performing the test.

#+begin_src scheme :eval never
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime)
                       start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
#+end_src

Using this procedure, write a procedure search-for-primes that checks the primality of consecutive odd integers in a specified range. Use your procedure to find the three smallest primes larger than 1000; larger than 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to test each prime. Since the testing algorithm has order of growth of $\theta(n)$, you should expect that testing for primes around 10,000 should take about 10 times as long as testing for primes around 1000. Do your timing data bear this out? How well do the data for 100,000 and 1,000,000 support the $\theta(n)$ prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?

** Solution
#+begin_src scheme
(load-from-path "1_22-definitions.scm")
(define (search-for-primes start)
  (define (search-for-primes-iter n count)
    (if (> count 0)
        (search-for-primes-iter
         (+ n 2)
         (if (timed-prime-test n) (- count 1) count))))
  (search-for-primes-iter
   (if (divides? 2 start) (+ start 1) start)
   3))
#+end_src

#+begin_example
> (search-for-primes 100000)
100003 | 71004
100019 | 69836
100043 | 69686

> (search-for-primes 1000000)
1000003 | 413345
1000033 | 417740
1000037 | 417630

> (search-for-primes 10000000)
10000019 | 692164
10000079 | 673696
10000103 | 697857

> (search-for-primes 100000000)
100000007 | 1731865
100000037 | 1448142
100000039 | 1630682
#+end_example

Let m be the mean time for the three smallest primes greater than 100000 and T_n to be the measured time (in nanoseconds) to check for primality of n. If m is taken take as the standard computation time for prime test, the deviation, D_n, from the expected computation time is:

\[
D_n = T_n - m\left(\frac{\sqrt{n}}{\sqrt{100000}}\right)
\]

Observed mean:
m = 70175

|         n | T_n (ns) |           D_n |
|-----------+----------+---------------|
|   1000003 |   413345 |     191431.83 |
|   1000033 |   417740 |     195823.50 |
|   1000037 |   417630 |     195713.06 |
|  10000019 |   692164 |    -9586.6667 |
|  10000079 |   673696 |    -28056.772 |
|  10000103 |   697857 |    -3896.6140 |
| 100000007 |  1731865 |    -487263.43 |
| 100000037 |  1448142 |    -770986.76 |
| 100000039 |  1630682 |    -588446.78 |
|-----------+----------+---------------|
|  Variance |       -- | 137875470000. |
#+tblfm: $3=$2-70175*(sqrt($1)/sqrt(100000))::@11$3=vvar(@I..@II)

* Exercise 1.23
The smallest-divisor procedure shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for test-divisor should not be 2, 3, 4, 5, 6, …, but rather 2, 3, 5, 7, 9, …. To implement this change, define a procedure next that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. Modify the smallest-divisor procedure to use (next test-divisor) instead of (+ test-divisor 1). With timed-prime-test incorporating this modified version of smallest-divisor, run the test for each of the 12 primes found in Exercise 1.22. Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2?

** Solution
#+begin_src scheme :eval query
(load-from-path "1_23-definitions.scm")
(search-for-primes 100000)
(search-for-primes 1000000)
(search-for-primes 10000000)
(search-for-primes 100000000)
#+end_src

#+RESULTS:
#+begin_example
100003 | 28128
100019 | 10090
100043 | 10186
1000003 | 29715
1000033 | 29531
1000037 | 29554
10000019 | 91376
10000079 | 91356
10000103 | 91318
100000007 | 289935
100000037 | 289866
100000039 | 301755
#+end_example


|         n | T_n (ns) | T2_n (ns) |   T_n/T2_n |
|-----------+----------+-----------+------------|
|    100003 |    71004 |     28128 |  1.7497720 |
|    100019 |    69836 |     10090 |  1.7098227 |
|    100043 |    69686 |     10186 |  1.8632122 |
|   1000003 |   413345 |     29715 |  3.6276472 |
|   1000033 |   417740 |     29531 |  3.7525377 |
|   1000037 |   417630 |     29554 |  3.7956357 |
|  10000019 |   692164 |     91376 |  1.1983781 |
|  10000079 |   673696 |     91356 |  1.1906816 |
|  10000103 |   697857 |     91318 |  1.1779986 |
| 100000007 |  1731865 |    289935 |  1.5999182 |
| 100000037 |  1448142 |    289866 | 0.68569829 |
| 100000039 |  1630682 |    301755 | 0.74455436 |
#+TBLFM: $4=$2/$3

* Exercise 1.24
Modify the timed-prime-test procedure of Exercise 1.22 to use fast-prime? (the Fermat method), and test each of the 12 primes you found in that exercise. Since the Fermat test has $\theta(log n)$ growth, how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000? Do your data bear this out? Can you explain any discrepancy you find?

** Solution
#+begin_src scheme :eval query
(load-from-path "1_24-definitions.scm")
(timed-prime-test 100003)
(timed-prime-test 100019)
(timed-prime-test 100043)
(timed-prime-test 1000003)
(timed-prime-test 1000033)
(timed-prime-test 1000037)
(timed-prime-test 10000019)
(timed-prime-test 10000079)
(timed-prime-test 10000103)
(timed-prime-test 100000007)
(timed-prime-test 100000037)
(timed-prime-test 100000039)
#+end_src

#+RESULTS:
#+begin_example
100003 | 14723
100019 | 28481
100043 | 6019
1000003 | 4187
1000033 | 4104
1000037 | 4228
10000019 | 6296
10000079 | 5024
10000103 | 4929
100000007 | 5661
100000037 | 5435
100000039 | 7817
#+end_example

\[
D_n = \frac{T3_n}{T2_n} - \frac{\log{n}}{\sqrt{n}}
\]

|         n | T2_n (ns) | T3_n (ns) |         D_n |
|-----------+-----------+-----------+-------------|
|    100003 |     28128 |      1472 | 0.015925580 |
|    100019 |     10090 |      2848 |  0.24585545 |
|    100043 |     10186 |      6019 |  0.55450849 |
|   1000003 |     29715 |      4187 |  0.12708977 |
|   1000033 |     29531 |      4104 |  0.12515729 |
|   1000037 |     29554 |      4228 |  0.12924487 |
|  10000019 |     91376 |      6296 | 0.063805134 |
|  10000079 |     91356 |      5024 | 0.049896679 |
|  10000103 |     91318 |      4929 | 0.048879249 |
| 100000007 |    289935 |      5661 | 0.017682998 |
| 100000037 |    289866 |      5435 | 0.016907975 |
| 100000039 |    301755 |      7817 | 0.024063054 |
#+tblfm: $4=$3/$2 - log($1)/sqrt($1)

* Exercise 1.25
Alyssa P. Hacker complains that we went to a lot of extra work in writing expmod. After all, she says, since we already know how to compute exponentials, we could have simply written

#+begin_src scheme :eval never
(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
#+end_src

Is she correct? Would this procedure serve as well for our fast prime tester? Explain.

** Solution
While mathematically both functions are equivalent, Alissa P Hacker solution will produce very large intermediate results that will slowdown the computation or even make the calculation impractical.

* Exercise 1.26
Louis Reasoner is having great difficulty doing Exercise 1.24. His fast-prime? test seems to run more slowly than his prime? test. Louis calls his friend Eva Lu Ator over to help. When they examine Louis’s code, they find that he has rewritten the expmod procedure to use an explicit multiplication, rather than calling square:

#+begin_src scheme :eval never
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (* (expmod base (/ exp 2) m)
             (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base
             (expmod base (- exp 1) m))
          m))))
#+end_src

“I don’t see what difference that could make,” says Louis. “I do.” says Eva. “By writing the procedure like that, you have transformed the $\theta(log n)$ process into a $\theta(n)$ process.” Explain.

** Solution
expmod will be evaluated twice for even exponents nullifying the effect of dividing the exponent by 2. In other words expmod will be evaluated n times.

* Exercise 1.27
Demonstrate that the Carmichael numbers listed in Footnote 47 really do fool the Fermat test. That is, write a procedure that takes an integer n and tests whether $a^n$ is congruent to a modulo n for every $a < n$, and try your procedure on the given Carmichael numbers.

** Solution
#+begin_src scheme
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))

(define (exaustive-fermat-test n)
  (define (exaustive-fermat-test-iter n a)
    (cond ((= n a) #t)
          ((= (expmod a n n) a)
           (exaustive-fermat-test-iter n (inc a)))
          (else #f)))
  (exaustive-fermat-test-iter n 1))

(test-assert (exaustive-fermat-test 561))
(test-assert (exaustive-fermat-test 1105))
(test-assert (exaustive-fermat-test 1729))
(test-assert (exaustive-fermat-test 2465))
(test-assert (exaustive-fermat-test 2821))
(test-assert (exaustive-fermat-test 6601))
#+end_src

* Exercise 1.28
One variant of the Fermat test that cannot be fooled is called the Miller-Rabin test (Miller 1976; Rabin 1980). This starts from an alternate form of Fermat’s Little Theorem, which states that if n is a prime number and a is any positive integer less than n, then a raised to the \((n-1)\)-st power is congruent to 1 modulo n. To test the primality of a number n by the Miller-Rabin test, we pick a random number $a < n$ and raise a to the \((n-1)\)-st power modulo n using the expmod procedure. However, whenever we perform the squaring step in expmod, we check to see if we have discovered a “nontrivial square root of 1 modulo n,” that is, a number not equal to 1 or $n-1$ whose square is equal to 1 modulo n. It is possible to prove that if such a nontrivial square root of 1 exists, then n is not prime. It is also possible to prove that if n is an odd number that is not prime, then, for at least half the numbers $a<n$, computing $a^{n-1}$ in this way will reveal a nontrivial square root of 1 modulo n. (This is why the Miller-Rabin test cannot be fooled.) Modify the expmod procedure to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller-Rabin test with a procedure analogous to fermat-test. Check your procedure by testing various known primes and non-primes. Hint: One convenient way to make expmod signal is to have it return 0.

** Solution
#+begin_src scheme
(define (guess-a n)
  (+ 1 (random (- n 1))))

(define (check-non-trivial-sqrt-mod x n m)
  (if (and
       (= x 1)
       (not (= n 1))
       (not (= n (- m 1))))
      0
      x))

(define (sqrmod-check n m)
  (check-non-trivial-sqrt-mod (remainder (square n) m) n m))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (sqrmod-check (expmod base (/ exp 2) m) m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))

(define (miller-rabin-test n)
  (= 1 (expmod (guess-a n) (- n 1) n)))

(test-assert (miller-rabin-test 11))
(test-assert (miller-rabin-test 23))
(test-assert (miller-rabin-test 100003))
(test-assert (miller-rabin-test 100019))
(test-assert (miller-rabin-test 100043))
(test-assert (miller-rabin-test 1000003))
(test-assert (miller-rabin-test 1000033))
(test-assert (miller-rabin-test 1000037))
(test-assert (miller-rabin-test 10000019))
(test-assert (miller-rabin-test 10000079))
(test-assert (miller-rabin-test 10000103))
(test-assert (miller-rabin-test 100000007))
(test-assert (miller-rabin-test 100000037))
(test-assert (miller-rabin-test 100000039))
(test-assert (not (miller-rabin-test 561)))
(test-assert (not (miller-rabin-test 1105)))
(test-assert (not (miller-rabin-test 1729)))
(test-assert (not (miller-rabin-test 2465)))
(test-assert (not (miller-rabin-test 2821)))
(test-assert (not (miller-rabin-test 6601)))
#+end_src
