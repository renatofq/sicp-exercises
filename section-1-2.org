#+title: 1.2 Exercises

* Exercise 1.9
Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.
#+begin_src scheme :eval never
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
#+end_src

Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

** Solution
*** First procedure
#+begin_example
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
#+end_example

*** Second procedure
#+begin_example
(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 7)
(+ (dec 2) (inc 7))
(+ 1 8)
(+ (dec 1) (inc 8))
(+ 0 9)
9
#+end_example

* Exercise 1.10
The following procedure computes a mathematical function called Ackermann’s function.
#+begin_src scheme :eval never
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
#+end_src

What are the values of the following expressions?
#+begin_src scheme :session :eval never
(A 1 10)
(A 2 4)
(A 3 3)
#+end_src

Consider the following procedures, where A is the procedure defined above:
#+begin_src scheme :eval never
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
#+end_src

Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes $5n^2$.

** Solution
#+begin_example
> (A 1 10)
$1 = 1024
> (A 2 4)
$2 = 65536
> (A 3 3)
$3 = 65536
#+end_example

$f(n) = 2n$

$g(n) = 2^n$

$h(n) = 2^{h(n-1)}$

* Exercise 1.11
A function f is defined by the rule that $f(n)=n$ if $n<3$ and $f(n)=f(n-1)+2f(n-2)+3f(n-3)$ if $n \ge 3$. Write a procedure that computes f by means of a recursive process. Write a procedure that computes f by means of an iterative process.

** Solution
*** Recursive
#+name: recursive
#+begin_src scheme
(define (f n)
  (if (< n 3)
      n
      (+
       (f (- n 1))
       (* 2 (f (- n 2)))
       (* 3 (f (- n 3))))))

(test-equal 0 (f 0))
(test-equal 1 (f 1))
(test-equal 2 (f 2))
(test-equal 4 (f 3))
(test-equal 11 (f 4))
(test-equal 25 (f 5))
#+end_src

*** Iterative
#+name: iterative
#+begin_src scheme
(define (f n)
  (define (f-step n-1 n-2 n-3)
    (+ n-1 (* 2 n-2) (* 3 n-3)))
  (define (f-iter n-1 n-2 n-3 count)
    (if (= count 0)
        n-1
        (f-iter (f-step n-1 n-2 n-3) n-1 n-2 (- count 1))))
  (if (< n 3)
      n
      (f-iter 2 1 0 (- n 2))))

(test-equal 0 (f 0))
(test-equal 1 (f 1))
(test-equal 2 (f 2))
(test-equal 4 (f 3))
(test-equal 11 (f 4))
(test-equal 25 (f 5))
#+end_src

* Exercise 1.12
The following pattern of numbers is called Pascal’s triangle.

#+begin_example
         1
       1   1
     1   2   1
   1   3   3   1
 1   4   6   4   1
       . . .
#+end_example

The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a procedure that computes elements of Pascal’s triangle by means of a recursive process.

** Solution
#+begin_src scheme
(define (pascal-triangle r k)
  (if (or (= r 1) (< k 2) (>= k r))
       1
       (+
        (pascal-triangle (- r 1) (- k 1))
        (pascal-triangle (- r 1) k))))

(test-equal 6 (pascal-triangle 5 3))
#+end_src

* Exercise 1.13
Prove that $Fib(n)$ is the closest integer to $\varphi^n/\sqrt{5}$ where $\varphi = (1 + \sqrt{5})/2$. Hint: Let $\psi = (1 - \sqrt{5})/2$. Use induction and the definition of the Fibonacci numbers (see 1.2.2) to prove that $Fib(n) = (\varphi^n - \psi^n) / \sqrt{5}$.

** Solution
Let $\varphi = \frac{1+\sqrt{5}}{2}$ and $\psi = \frac{1-\sqrt{5}}{2}$. If $Fib(n)$ is the nearest integer to $\frac{\varphi^n}{\sqrt{5}}$, the following inequality holds true:

\[ \left| Fib(n) - \frac{\varphi^n}{\sqrt{5}} \right| < \frac{1}{2} \]

Proposition:
\[ Fib(n) = \frac{\varphi^n}{\sqrt{5}} - \frac{\psi^n}{\sqrt{5}} \]

Demonstration:
\[
\frac{\varphi^n - \psi^n}{\sqrt{5}} =
\frac{\varphi^{n-1} - \psi^{n-1}}{\sqrt{5}} +
\frac{\varphi^{n-2} - \psi^{n-2}}{\sqrt{5}}
\]
\[
\varphi^n - \psi^n =
\varphi^{n-1} - \psi^{n-1} + \varphi^{n-2} - \psi^{n-2}
\]
\[
\varphi^n - \psi^n =
\frac{\varphi^n}{\varphi} - \frac{\psi^n}{\psi} +
\frac{\varphi^n}{\varphi^2} - \frac{\psi^n}{\psi^2}
\]
\[
\varphi^n - \psi^n =
\varphi^n \left(\frac{1}{\varphi} + \frac{1}{\varphi^2}\right) -
\psi^n \left(\frac{1}{\psi} + \frac{1}{\psi^2}\right)
\]
\[
\varphi^n - \psi^n =
\varphi^n \left( \frac{\varphi + 1}{\varphi^2} \right) -
\psi^n \left( \frac{\psi + 1}{\psi^2} \right)
\]

Since $\varphi^2 = \varphi + 1$:
\[
\varphi^2 = \varphi + 1
\]
\[
\left(\frac{1+\sqrt{5}}{2}\right)^2 = \frac{1+\sqrt{5}}{2} + 1
\]
\[
\frac{\left( 1+\sqrt{5} \right)^2}{4} = \frac{1+\sqrt{5}}{2} + 1
\]
\[
\left( 1+\sqrt{5} \right)^2 = 4\left(\frac{1+\sqrt{5}}{2} + 1 \right)
\]
\[
\left( 1+\sqrt{5} \right)^2 = 2 \left( 1+\sqrt{5} \right) + 4
\]
\[
\left( 1+\sqrt{5} \right)^2 = 2 + 2\sqrt{5} + 4
\]
\[
\left( 1+\sqrt{5} \right)^2 = 6 + 2\sqrt{5}
\]
\[
1 + 2\sqrt{5} + 5 = 6 + 2\sqrt{5}
\]
\[
6 + 2\sqrt{5} = 6 + 2\sqrt{5}
\]
\[
3 + \sqrt{5} = 3 + \sqrt{5}
\]

And $\psi^2 = \psi + 1$:
\[
\psi^2 = \psi + 1
\]
\[
\left(\frac{1-\sqrt{5}}{2}\right)^2 = \frac{1-\sqrt{5}}{2} + 1
\]
\[
\frac{\left( 1-\sqrt{5} \right)^2}{4} = \frac{1-\sqrt{5}}{2} + 1
\]
\[
\left( 1-\sqrt{5} \right)^2 = 4\left(\frac{1-\sqrt{5}}{2} + 1 \right)
\]
\[
\left( 1-\sqrt{5} \right)^2 = 2 \left( 1-\sqrt{5} \right) + 4
\]
\[
\left( 1-\sqrt{5} \right)^2 = 2 - 2\sqrt{5} + 4
\]
\[
\left( 1-\sqrt{5} \right)^2 = 6 - 2\sqrt{5}
\]
\[
1 - 2\sqrt{5} + 5 = 6 - 2\sqrt{5}
\]
\[
6 - 2\sqrt{5} = 6 - 2\sqrt{5}
\]
\[
3 - \sqrt{5} = 3 - \sqrt{5}
\]

The proposition is true. Substituting $Fib(n)$ in the original inequality:
\[
\left| \frac{\varphi^n}{\sqrt{5}} -
\frac{\psi^n}{\sqrt{5}}  -
\frac{\varphi^n}{\sqrt{5}} \right|
< \frac{1}{2}
\]
\[
\left| - \frac{\psi^n}{\sqrt{5}} \right| < \frac{1}{2}
\]

As $-1 < \psi < 0$, so $-1 < \psi^n < 1$ for any $n \in \mathbb{N} > 0$, and $\sqrt{5} > 2$, therefore $Fib(n)$ is the nearest integer to $\frac{\varphi^n}{\sqrt{5}}$.

* Exercise 1.14
Draw the tree illustrating the process generated by the count-change procedure of 1.2.2 in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?

** Solution
Evaluation tree:

#+INCLUDE: "annex/1_14-tree-graph.dot" src dot :file annex/1_14-tree-graph.png

* Exercise 1.15
The sine of an angle (specified in radians) can be computed by making use of the approximation $\sin{x} \approx x$ if $x$ is sufficiently small, and the trigonometric identity

\[ \sin{x} = 3\sin{\frac{x}{3}} - 4\sin^3{\frac{x}{3}} \]

to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered “sufficiently small” if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:

#+begin_src scheme :eval never
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
   (if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))
#+end_src

1. How many times is the procedure p applied when (sine 12.15) is evaluated?
2. What is the order of growth in space and number of steps (as a function of a) used by the process generated by the sine procedure when (sine a) is evaluated?

** Solution
The procedure p will be applied 5 times when (sine 12.15) is evaluated (See evaluation annex). As for the order of growth, this function is a linear recursion, so it means that the space required to compute has the same order of growth of the number of steps needed to finish. The procedure evolves by successively applying the transformation $a \leftarrow \frac{a}{3}$ until $a < 0.1$. This can be expressed as the product:

\[ a\prod_{1}^{n} \frac{1}{3} < 0.1 \]

\[ 0.1 > \frac{a}{3^n} \]

Where n is the number of steps. Solving for n:

\[ 0.1(3^n) > a \]
\[ 3^n > \frac{a}{0.1} \]
\[ \log_{3}{3^n} > \log_{3}{\left(\frac{a}{0.1}\right)} \]
\[ n > \log_{3}{a} - \log_{3}{0.1} \]

Applying 12.15 $\log_{3}{12.15} - \log_{3}{0.1} \approx 4.369$ where 5 is the smallest integer that solves the inequality.

Applying $\theta$, the order of growth is $\theta(\log{a})$.

* Exercise 1.16
Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does fast-expt. (Hint: Using the observation that $(b^{n/2})^2 = (b^2)^{n/2}$, keep, along with the exponent n and the base b, an additional state variable a, and define the state transformation in such a way that the product ab^n is unchanged from state to state. At the beginning of the process a is taken to be 1, and the answer is given by the value of a at the end of the process. In general, the technique of defining an invariant quantity that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)

** Solution
#+begin_src scheme
(define (expt b n)
  (define (even? n) (= 0 (remainder n 2)))
  (define (expt-iter b n a)
    (cond ((= n 0) a)
          ((even? n) (expt-iter (* b b) (/ n 2) a))
          (else  (expt-iter b (- n 1) (* a b)))))
  (expt-iter b n 1))

(test-equal 1 (expt 10 0))
(test-equal 7 (expt 7 1))
(test-equal 9 (expt 3 2))
(test-equal 125 (expt 5 3))
(test-equal 625 (expt 5 4))
(test-equal 32 (expt 2 5))
(test-equal 729 (expt 3 6))
(test-equal 78125 (expt 5 7))
(test-equal 256 (expt 2 8))
(test-equal 19683 (expt 3 9))
#+end_src

* Exercise 1.17
The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the expt procedure:

#+begin_src scheme :eval never
(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b 1)))))
#+end_src

This algorithm takes a number of steps that is linear in b. Now suppose we include, together with addition, operations double, which doubles an integer, and halve, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to fast-expt that uses a logarithmic number of steps.

** Solution
#+begin_src scheme
(define (halve n) (/ n 2))
(define (multi a b)
    (cond ((= b 0) 0)
          ((even? b) (multi (+ a a) (halve b)))
          (else  (+ a (multi a (- b 1) )))))

(test-equal 0 (multi 10 0))
(test-equal 7 (multi 7 1))
(test-equal 6 (multi 3 2))
(test-equal 15 (multi 5 3))
(test-equal 20 (multi 5 4))
(test-equal 10 (multi 2 5))
(test-equal 18 (multi 3 6))
(test-equal 35 (multi 5 7))
(test-equal 16 (multi 2 8))
(test-equal 27 (multi 3 9))
#+end_src

* Exercise 1.18
Using the results of Exercise 1.16 and Exercise 1.17, devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.

** Solution
#+begin_src scheme
(define (multi a b)
  (define (halve n) (/ n 2))
  (define (multi-iter a b c)
    (cond ((= b 0) c)
          ((even? b) (multi-iter (+ a a) (halve b) c))
          (else  (multi-iter a (- b 1) (+ c a)))))
  (multi-iter a b 0))

(test-equal 0 (multi 10 0))
(test-equal 7 (multi 7 1))
(test-equal 6 (multi 3 2))
(test-equal 15 (multi 5 3))
(test-equal 20 (multi 5 4))
(test-equal 10 (multi 2 5))
(test-equal 18 (multi 3 6))
(test-equal 35 (multi 5 7))
(test-equal 16 (multi 2 8))
(test-equal 27 (multi 3 9))
#+end_src

* Exercise 1.19
There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables a and b in the fib-iter process of 1.2.2: $a \leftarrow a + b$ and $b \leftarrow a$. Call this transformation T, and observe that applying T over and over again n times, starting with 1 and 0, produces the pair $Fib(n + 1)$ and $Fib(n)$. In other words, the Fibonacci numbers are produced by applying $T^n$, the nth power of the transformation T, starting with the pair $(1, 0)$. Now consider T to be the special case of $p = 0$ and $q = 1$ in a family of transformations $T_{pq}$, where $T_{pq}$ transforms the pair $(a, b)$ according to $a \leftarrow bq + aq + ap$ and $b \leftarrow bp + aq$. Show that if we apply such a transformation $T_{pq}$ twice, the effect is the same as using a single transformation $T_{p'q'}$ of the same form, and compute $p'$ and $q'$ in terms of p and q. This gives us an explicit way to square these transformations, and thus we can compute $T^n$ using successive squaring, as in the fast-expt procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps:

#+begin_src scheme :eval never
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0)
         b)
        ((even? count)
         (fib-iter a
                   b
                   ⟨??⟩  ;compute p'
                   ⟨??⟩  ;compute q'
                   (/ count 2)))
        (else
         (fib-iter (+ (* b q)
                      (* a q)
                      (* a p))
                   (+ (* b p)
                      (* a q))
                   p
                   q
                   (- count 1)))))
#+end_src

** Solution
#+begin_src scheme
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   (+ (* p p) (* q q))
                   (+ (* q q) (* 2 p q))
                   (/ count 2)))
        (else
         (fib-iter (+ (* b q)
                      (* a q)
                      (* a p))
                   (+ (* b p)
                      (* a q))
                   p
                   q
                   (- count 1)))))

(test-equal 1  (fib 1))
(test-equal 1  (fib 2))
(test-equal 2  (fib 3))
(test-equal 3  (fib 4))
(test-equal 5  (fib 5))
(test-equal 8  (fib 6))
(test-equal 13 (fib 7))
(test-equal 610 (fib 15))
(test-equal 1548008755920 (fib 60))
(test-equal 2880067194370816120 (fib 90))
#+end_src
