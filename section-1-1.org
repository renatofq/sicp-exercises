#+TITLE: Section 1.1 Exercises

* Exercise 1.1
Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.

#+begin_src scheme :eval never
10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src

** Solution
#+begin_example
$1  = 10
$2  = 12
$3  = 8
$4  = 3
$5  = 6
;; a defined
;; b defined
$6  = 19
$7  = #f
$8  = 4
$9  = 16
$10 = 6
$11 = 16
#+end_example

* Exercise 1.2
Translate the following expression into prefix form:

\[
\frac{5 + 4 + ( 2 - ( 3 - ( 6 + \frac{4}{5} ) ) )}
     {3( 6 - 2 )( 2 - 7 )}
\]

** Solution
#+begin_src scheme :results value
(/
 (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
 (* 3 (- 6 2) (- 2 7)))
#+end_src

Result
#+begin_example
$1 = -37/150
#+end_example

* Exercise 1.3
Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

** Solution
#+begin_src scheme
(define (weird-sum-of-squares a b c)
  (define x (if (> a b) a b))
  (define y (cond
             ((or (> c a) (> c b)) c)
             ((< a  b) a)
             (else b)))
  (+ (* x x) (* y y)))

(test-assert
    (=
     25
     (weird-sum-of-squares 2 3 4)
     (weird-sum-of-squares 2 4 3)
     (weird-sum-of-squares 3 2 4)
     (weird-sum-of-squares 3 4 2)
     (weird-sum-of-squares 4 2 3)
     (weird-sum-of-squares 4 3 2)))
#+end_src

* Exercise 1.4
Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:

#+begin_src scheme :eval never
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+end_src

** Solution
The result of the if expression is the symbol for the operator applied to a and b, because of applicative-order evaluation.

* Exercise 1.5
Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

#+begin_src scheme :eval never
(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))
#+end_src

Then he evaluates the expression

#+begin_src scheme :eval never
(test 0 (p))
#+end_src

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)

** Solution
For applicative-order evaluation the interpreter will try to solve (p) indefinitely. For normal-order evaluation the result is 0.

* Exercise 1.6
Alyssa P. Hacker doesn't see why if needs to be provided as a special form. “Why can’t I just define it as an ordinary procedure in terms of cond?” she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:

#+begin_src scheme :eval never
(define (new-if predicate
                then-clause
                else-clause)
  (cond (predicate 'then-clause)
        (else 'else-clause)))

(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src

Eva demonstrates the program for Alyssa:
#+begin_example
> (new-if (= 2 3) 0 5)
$1 = 5

> (new-if (= 1 1) 0 5)
$2 = 0
#+end_example

Delighted, Alyssa uses new-if to rewrite the square-root program:
#+begin_src scheme :eval never
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src

What happens when Alyssa attempts to use this to compute square roots? Explain.

** Solution
As new-if is a regular procedure, so, it's arguments get evaluated first and that leads to a infinite recursion of sqrt-iter. The special form if, on the other hand, evaluate the consequent only if the predicate is true, the alternative get evaluated only if otherwise.

* Exercise 1.7
The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

** Solution
#+begin_src scheme
(define (good-enough? last-guess guess)
  (< (abs (- 1 (/ last-guess guess))) 0.001))

(define (improve guess x)
  (/ (+ guess (/ x guess)) 2))

(define (sqrt-iter x last-guess guess)
  (if (good-enough? last-guess guess)
      guess
      (sqrt-iter x guess (improve guess x))))

(define (sqrt x)
  (sqrt-iter x 0.0 1.0))

(test-approximate 100000.0 (sqrt 10000000000.0) 0.001)
#+end_src

* Exercise 1.8
Newton’s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value:

\[ \frac{x/y^2 + 2y}{3} \]

Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In 1.3.4 we will see how to implement Newton’s method in general as an abstraction of these square-root and cube-root procedures.)

** Solution
#+begin_src scheme
(define (good-enough? last-guess guess)
  (< (abs (- 1 (/ last-guess guess))) 0.001))

(define (improve-cube-root-guess y x)
  (/ (+ (/ x (* y y)) (* 2 y)) 3))

(define (cube-root-iter x last-guess guess)
  (if (good-enough? last-guess guess)
      guess
      (cube-root-iter x guess (improve-cube-root-guess guess x))))

(define (cube-root x)
  (cube-root-iter x 0.0 1.0))

(test-approximate 3 (cube-root 27) 0.001)
#+end_src
