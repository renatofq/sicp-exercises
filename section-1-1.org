#+TITLE: 1.1 Exercises

* Exercise 1.1
Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.

#+begin_src scheme :eval never
10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src

** Solution
#+begin_example
$1  = 10
$2  = 12
$3  = 8
$4  = 3
$5  = 6
;; a defined
;; b defined
$6  = 19
$7  = #f
$8  = 4
$9  = 16
$10 = 6
$11 = 16
#+end_example

* Exercise 1.2
Translate the following expression into prefix form:

\[
\frac{5 + 4 + ( 2 - ( 3 - ( 6 + \frac{4}{5} ) ) )}
     {3( 6 - 2 )( 2 - 7 )}
\]

** Solution
#+begin_src scheme :results value
(/
 (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
 (* 3 (- 6 2) (- 2 7)))
#+end_src

Result
#+begin_example
$1 = -37/150
#+end_example

* Exercise 1.3
Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

** Solution
#+begin_src scheme
(define (weird-sum-of-squares a b c)
  (define x (if (> a b) a b))
  (define y (cond
             ((or (> c a) (> c b)) c)
             ((< a  b) a)
             (else b)))
  (+ (* x x) (* y y)))

(test-assert
    (=
     25
     (weird-sum-of-squares 2 3 4)
     (weird-sum-of-squares 2 4 3)
     (weird-sum-of-squares 3 2 4)
     (weird-sum-of-squares 3 4 2)
     (weird-sum-of-squares 4 2 3)
     (weird-sum-of-squares 4 3 2)))
#+end_src

* Exercise 1.4
Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:

#+begin_src scheme :eval never
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+end_src

** Solution
The result of the if expression is the symbol for the operator applied to a and b, because of applicative-order evaluation.

* Exercise 1.5
Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

#+begin_src scheme :eval never
(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))
#+end_src

Then he evaluates the expression

#+begin_src scheme :eval never
(test 0 (p))
#+end_src

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)

** Solution
For applicative-order evaluation the interpreter will try to solve (p) indefinitely. For normal-order evaluation the result is 0.
