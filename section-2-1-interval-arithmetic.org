#+TITLE: 2.1 Extended Exercise: Interval Arithmetic

* Exercise 2.7
Alyssa’s program is incomplete because she has not specified the implementation of the interval abstraction. Here is a definition of the interval constructor:

#+begin_src scheme :eval never
(define (make-interval a b) (cons a b))
#+end_src

Define selectors upper-bound and lower-bound to complete the implementation.

** Solution
#+begin_src scheme
(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

;; validation
(test-equal 0.5 (lower-bound (make-interval 0.5 1.5)))
(test-equal 1 (upper-bound (make-interval -1 1)))
#+end_src

* Exercise 2.8
Using reasoning analogous to Alyssa’s, describe how the difference of two intervals may be computed.  Define a corresponding subtraction procedure, called sub-interval.

** Solution
#+begin_src scheme
(define (sub-interval x y)
  (make-interval (- (lower-bound x)
                    (lower-bound y))
                 (- (upper-bound x)
                    (upper-bound y))))

;; validation
(test-equal (make-interval 1 1) (sub-interval
                                 (make-interval 2 3)
                                 (make-interval 1 3)))
#+end_src

* Exercise 2.9
The  width of an interval is half of the difference between its upper and lower bounds.  The width is a measure of the uncertainty of the number specified by the interval.  For some arithmetic operations the width of the result of combining two intervals is a function only of the widths of the argument intervals, whereas for others the width of the combination is not a function of the widths of the argument intervals.  Show that the width of the sum (or difference) of two intervals is a function only of the widths of the intervals being added (or subtracted). Give examples to show that this is not true for multiplication or division.

** Solution
Let $x$ be an interval in $\mathbb{R}$, $l(x)$ be the lower bound of $x$, $u(x)$ be the upper bound of $x$ and $w(x)$ be the width of $x$.

By definition

\begin{equation} \label{w-of-x}
w(x) = \frac{u(x) - l(x)}{2}
\end{equation}

\begin{equation} \label{l-of-x+y}
l(x + y) = l(x) + l(y)
\end{equation}

\begin{equation} \label{u-of-x+y}
u(x + y) = u(x) + u(y)
\end{equation}

Then

\begin{align*}
w(x + y) &= \frac{u(x + y) - l(x + y)}{2} &\text{by \eqref{w-of-x}} \\
  &= \frac{u(x) + u(y) - \left( l(x) + l(y) \right)}{2}
      &\text{applying \eqref{l-of-x+y} and \eqref{u-of-x+y}} \\
  &= \frac{u(x) - l(x)}{2} + \frac{u(y) - l(y)}{2} &\text{by associativity} \\
  &= w(x) + w(y) &\text{by \eqref{w-of-x}}
\end{align*}


* Exercise 2.10
Ben Bitdiddle, an expert systems programmer, looks over Alyssa’s shoulder and comments that it is not clear what it means to divide by an interval that spans zero.  Modify Alyssa’s code to check for this condition and to signal an error if it occurs.

** Solution
#+begin_src scheme
(define (interval-spans-zero? x)
  (<= (lower-bound x) 0 (upper-bound x)))

(define (div-interval x y)
  (if (interval-spans-zero? y)
      (error "divisor interval cannot span 0")
      (mul-interval x
                    (make-interval
                     (/ 1.0 (upper-bound y))
                     (/ 1.0 (lower-bound y))))))
#+end_src

* Exercise 2.11
In passing, Ben also cryptically comments: “By testing the signs of the endpoints of the intervals, it is possible to break mul-interval into nine cases, only one of which requires more than two multiplications.”  Rewrite this procedure using Ben’s suggestion.

#+begin_src scheme
(define (interval-spans-zero? x)
  (<= (lower-bound x) 0 (upper-bound x)))

(define (positive-interval? x)
  (positive? (lower-bound x)))

(define (general-mul-interval x y)
  (let ((p1 (* (lower-bound x)
               (lower-bound y)))
        (p2 (* (lower-bound x)
               (upper-bound y)))
        (p3 (* (upper-bound x)
               (lower-bound y)))
        (p4 (* (upper-bound x)
               (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (mul-interval x y)
  (cond ((interval-spans-zero? x)
         (cond ((interval-spans-zero? y)
                (general-mul-interval x y))

               ((positive-interval? y)
                (make-interval (* (lower-bound x) (upper-bound y))
                               (* (upper-bound x) (upper-bound y))))

               (else
                (make-interval (* (upper-bound x) (lower-bound y))
                               (* (lower-bound x) (lower-bound y))))))

        ((positive-interval? x)
         (cond ((interval-spans-zero? y)
                (make-interval (* (upper-bound x) (lower-bound y))
                               (* (upper-bound x) (upper-bound y))))

               ((positive-interval? y)
                (make-interval (* (lower-bound x) (lower-bound y))
                               (* (upper-bound x) (upper-bound y))))

               (else
                (make-interval (* (upper-bound x) (lower-bound y))
                               (* (lower-bound x) (upper-bound y))))))

        (else
         (cond ((interval-spans-zero? y)
                (make-interval (* (lower-bound x) (upper-bound y))
                               (* (lower-bound x) (lower-bound y))))

               ((positive-interval? y)
                (make-interval (* (lower-bound x) (upper-bound y))
                               (* (upper-bound x) (lower-bound y))))

               (else
                (make-interval (* (upper-bound x) (upper-bound y))
                               (* (lower-bound x) (lower-bound y))))))))

;; validation
;;                      x          y      expected
(let ((test-data '(((-1 . 1)   (-2 . 2)   (-2 . 2))  ;; x spans 0
                   ((-1 . 1)    (1 . 3)   (-3 . 3))
                   ((-1 . 1)   (-4 . -1)  (-4 . 4))
                   ( (0 . 1)   (-2 . 2)   (-2 . 2))
                   ( (0 . 1)    (1 . 3)    (0 . 3))
                   ( (0 . 1)   (-4 . -1)  (-4 . 0))
                   ((-1 . 0)   (-2 . 2)   (-2 . 2))
                   ((-1 . 0)    (1 . 3)   (-3 . 0))
                   ((-1 . 0)   (-4 . -1)   (0 . 4))

                   ( (1 . 2)   (-2 . 2)   (-4 . 4))  ;; x is strictly positive
                   ( (1 . 2)    (1 . 3)    (1 . 6))
                   ( (1 . 2)   (-4 . -1)  (-8 . -1))
                   ( (1 . 2)    (0 . 1)    (0 . 2))
                   ( (1 . 2)   (-1 . 0)   (-2 . 0))

                   ((-2 . -1)  (-2 . 2)   (-4 . 4))  ;; x is strictly negative
                   ((-2 . -1)   (1 . 3)   (-6 . -1))
                   ((-2 . -1)  (-4 . -1)   (1 . 8))
                   ((-2 . -1)   (0 . 1)   (-2 . 0))
                   ((-2 . -1)  (-1 . 0)    (0 . 2))))
      (eval-test (lambda (x y expected)
                   (test-equal expected
                     (mul-interval x y)))))
  (for-each
   (lambda (sample)
     (eval-test (car sample)
                (cadr sample)
                (caddr sample)))
   test-data))

#+end_src

* TODO Exercise 2.12
Define a constructor make-center-percent that takes a center and a percentage tolerance and produces the desired interval.  You must also define a selector percent that produces the percentage tolerance for a given interval.  The center selector is the same as the one shown above.

* TODO Exercise 2.13
Show that under the assumption of small percentage tolerances there is a simple formula for the approximate percentage tolerance of the product of two intervals in terms of the tolerances of the factors.  You may simplify the problem by assuming that all numbers are positive.

After considerable work, Alyssa P. Hacker delivers her finished system. Several years later, after she has forgotten all about it, she gets a frenzied call from an irate user, Lem E. Tweakit.  It seems that Lem has noticed that the formula for parallel resistors can be written in two algebraically equivalent ways:

\[ \frac{R_1 R_2}{R_1 + R_2} \]

and

\[ \frac{1}{1/R_1 + 1/R_2} \]

He has written the following two programs, each of which computes the parallel-resistors formula differently:

#+begin_src scheme :eval never
(define (par1 r1 r2)
  (div-interval
   (mul-interval r1 r2)
   (add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval
     one
     (add-interval
      (div-interval one r1)
      (div-interval one r2)))))
#+end_src

Lem complains that Alyssa’s program gives different answers for the two ways of computing. This is a serious complaint.

* TODO Exercise 2.14
Demonstrate that Lem is right. Investigate the behavior of the system on a variety of arithmetic expressions. Make some intervals $A$ and $B$, and use them in computing the expressions $A/A$ and $A/B$.  You will get the most insight by using intervals whose width is a small percentage of the center value. Examine the results of the computation in center-percent form (see Exercise 2.12).

* TODO Exercise 2.15
Eva Lu Ator, another user, has also noticed the different intervals computed by different but algebraically equivalent expressions. She says that a formula to compute with intervals using Alyssa's system will produce tighter error bounds if it can be written in such a form that no variable that represents an uncertain number is repeated.  Thus, she says, par2 is a “better” program for parallel resistances than par1.  Is she right?  Why?

* TODO Exercise 2.16
Explain, in general, why equivalent algebraic expressions may lead to different answers.  Can you devise an interval-arithmetic package that does not have this shortcoming, or is this task impossible?  (Warning: This problem is very difficult.)
