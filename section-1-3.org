#+TITLE: Section 1.3 Exercises

* Exercise 1.29
Simpson’s Rule is a more accurate method of numerical integration than the method illustrated above. Using Simpson’s Rule, the integral of a function f between a and b is approximated as \(\frac{h}{3}(y_0 + 4y_1 + 2y_2 + 4y_3 + 2y_4 + \cdots + 2y_{n-2} + 4y_{n-1} + y_n) \), where \(h = (b-a)/n \), for some even integer n, and $y_k = f(a+kh)$. (Increasing n increases the accuracy of the approximation.) Define a procedure that takes as arguments f, a, b, and n and returns the value of the integral, computed using Simpson’s Rule. Use your procedure to integrate cube between 0 and 1 (with $n=100$ and $n=1000$), and compare the results to those of the integral procedure shown above.

** Solution
#+begin_src scheme
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (integral f a b n)
  (define h (/ (- b a) n))
  (define (y k) (f (+ a (* k h))))
  (define (term k) (* (y k) (+ 2 (* 2 (remainder k 2)))))
  (* (/ h 3) (+ (y 0) (y n) (sum term 1 inc (- n 1)))))

(test-equal (/ 1 4) (integral cube 0 1 100))
(test-equal (/ 1 4) (integral cube 0 1 1000))
#+end_src

* Exercise 1.30
The sum procedure above generates a linear recursion. The procedure can be rewritten so that the sum is performed iteratively. Show how to do this by filling in the missing expressions in the following definition:

#+begin_src scheme :eval never
(define (sum term a next b)
  (define (iter a result)
    (if ⟨??⟩
        ⟨??⟩
        (iter ⟨??⟩ ⟨??⟩)))
  (iter ⟨??⟩ ⟨??⟩))
#+end_src

** Solution
#+begin_src scheme
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))

(test-equal 55 (sum identity 1 inc 10))
#+end_src

* Exercise 1.31
1. The sum procedure is only the simplest of a vast number of similar abstractions that can be captured as higher-order procedures.51 Write an analogous procedure called product that returns the product of the values of a function at points over a given range. Show how to define factorial in terms of product. Also use product to compute approximations to $\pi$ using the formula

\[
\frac{\pi}{4} =
\frac{2 \cdot 4 \cdot 4 \cdot 6 \cdot 6 \cdot 8 \cdot \cdots}
     {3 \cdot 3 \cdot 5 \cdot 5 \cdot 7 \cdot 7 \cdot \cdots}.
\]

2. If your product procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.

** Solution
*** Recursive
#+name recursive pi-approx
#+begin_src scheme
(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))

(define (pi-approx n)
  (define (inc n) (+ n 1))
  (define (term n)
    (define n+1 (+ n 1.0))
    (/
     (+ n+1 (remainder n+1 2))
     (+ n+1 (remainder n 2))))
  (* 4 (product term 1 inc n)))

(test-approximate 3.141 (pi-approx 10000) 0.001)
#+end_src

*** Iterative
#+name iterative pi-approx
#+begin_src scheme
(define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* result (term a)))))
  (iter a 1))

(define (pi-approx n)
  (define (inc n) (+ n 1))
  (define (term n)
    (define n+1 (+ n 1.0))
    (/
     (+ n+1 (remainder n+1 2))
     (+ n+1 (remainder n 2))))
  (* 4 (product term 1 inc n)))

(test-approximate 3.141 (pi-approx 10000) 0.001)
#+end_src

* Exercise 1.32
1. Show that sum and product (Exercise 1.31) are both special cases of a still more general notion called accumulate that combines a collection of terms, using some general accumulation function:
   #+begin_src scheme :eval never
   (accumulate
    combiner null-value term a next b)
   #+end_src
   Accumulate takes as arguments the same term and range specifications as sum and product, together with a combiner procedure (of two arguments) that specifies how the current term is to be combined with the accumulation of the preceding terms and a null-value that specifies what base value to use when the terms run out. Write accumulate and show how sum and product can both be defined as simple calls to accumulate.

2. If your accumulate procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.

** Solution
*** Recursive
#+begin_src scheme
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner
       (term a)
       (accumulate combiner null-value term (next a) next b))))

(define (product term a next b)
  (accumulate * 1 term a next b))
(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (factorial n)
  (product identity 1 inc n))
(define (sum-of-naturals n)
  (sum identity 1 inc n))

(test-equal 120 (factorial 5))
(test-equal 15  (sum-of-naturals 5))
#+end_src

*** Iterative
#+begin_src scheme
(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner result (term a)))))
  (iter a null-value))

(define (product term a next b)
  (accumulate * 1 term a next b))
(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (factorial n)
  (product identity 1 inc n))
(define (sum-of-naturals n)
  (sum identity 1 inc n))

(test-equal 120 (factorial 5))
(test-equal 15  (sum-of-naturals 5))
#+end_src

* Exercise 1.33
You can obtain an even more general version of accumulate (Exercise 1.32) by introducing the notion of a filter on the terms to be combined. That is, combine only those terms derived from values in the range that satisfy a specified condition. The resulting filtered-accumulate abstraction takes the same arguments as accumulate, together with an additional predicate of one argument that specifies the filter. Write filtered-accumulate as a procedure. Show how to express the following using filtered-accumulate:
1. the sum of the squares of the prime numbers in the interval a to b (assuming that you have a prime? predicate already written)
2. the product of all the positive integers less than n that are relatively prime to n (i.e., all positive integers $i<n$ such that $GCD(i,n)=1$).

** Solution
#+begin_src scheme
(load-from-path "1_33-definitions.scm")
(define (filtered-accumulate predicate combiner null-value term a next b)
  (define (evaluate-result result value)
    (if (not (predicate value))
        result
        (combiner result value)))
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (evaluate-result result (term a)))))
  (iter a null-value))

(define (sum-of-squares-of-primes a b)
  (define (sum-square r n)
    (+ r (square n)))
  (filtered-accumulate prime? sum-square 0 identity a inc b))

(define (product-of-coprimes n)
  (define (coprime? a) (= 1 (gcd a n)))
  (filtered-accumulate coprime? * 1 identity 2 inc (- n 1)))

(test-equal 87 (sum-of-squares-of-primes 2 7))
(test-equal 5 (product-of-coprimes 6))
#+end_src

* Exercise 1.34
Suppose we define the procedure
#+begin_src scheme :eval never
(define (f g) (g 2))
#+end_src
Then we have
#+begin_example
(f square)
4

(f (lambda (z) (* z (+ z 1))))
6
#+end_example
What happens if we (perversely) ask the interpreter to evaluate the combination (f f)? Explain.

** Solution
It will expand to (2 2) and raise an error trying to execute 2 as a procedure.

* Exercise 1.35
Show that the golden ratio $\varphi$ (1.2.2) is a fixed point of the transformation $x \mapsto 1 + 1/x$, and use this fact to compute $\varphi$ by means of the fixed-point procedure.

** Solution
Given that $\varphi$ solves the equation $x^2 = x + 1$, see solution of 1.15, then
\[ \varphi = \frac{\varphi + 1}{\varphi} \]
\[ \varphi =  1 + \frac{1}{\varphi} \]

#+begin_src scheme
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (approximate-phi)
  (fixed-point
   (lambda (x) (+ 1 (/ 1 x)))
   1.0))

(test-approximate 1.61803 (approximate-phi) tolerance)
#+end_src

* Exercise 1.36
Modify fixed-point so that it prints the sequence of approximations it generates, using the newline and display primitives shown in Exercise 1.22. Then find a solution to $x^x = 1000$ by finding a fixed point of $x \mapsto log(1000)/log(x)$. (Use Scheme’s primitive log procedure, which computes natural logarithms.) Compare the number of steps this takes with and without average damping. (Note that you cannot start fixed-point with a guess of 1, as this would cause division by $log(1)=0$.)

** Solution
#+begin_src scheme
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess n)
    (display "try #")
    (display n)
    (display ": ")
    (display guess)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next (inc n)))))
  (try first-guess 1))

(define (average x y) (/ (+ x y) 2))

(display "Without average damping")
(newline)
(display (fixed-point
          (lambda (x)
            (/ (log 1000) (log x)))
          10.0))
(newline)

(newline)
(display "With average damping")
(newline)
(display (fixed-point
          (lambda (x)
            (average x (/ (log 1000) (log x))))
          10.0))
(newline)
#+end_src

#+RESULTS:
#+begin_example
Without average damping
try #1: 10.0
try #2: 2.9999999999999996
try #3: 6.2877098228681545
try #4: 3.7570797902002955
try #5: 5.218748919675316
try #6: 4.1807977460633134
try #7: 4.828902657081293
try #8: 4.386936895811029
try #9: 4.671722808746095
try #10: 4.481109436117821
try #11: 4.605567315585735
try #12: 4.522955348093164
try #13: 4.577201597629606
try #14: 4.541325786357399
try #15: 4.564940905198754
try #16: 4.549347961475409
try #17: 4.5596228442307565
try #18: 4.552843114094703
try #19: 4.55731263660315
try #20: 4.554364381825887
try #21: 4.556308401465587
try #22: 4.555026226620339
try #23: 4.55587174038325
try #24: 4.555314115211184
try #25: 4.555681847896976
try #26: 4.555439330395129
try #27: 4.555599264136406
try #28: 4.555493789937456
try #29: 4.555563347820309
try #30: 4.555517475527901
try #31: 4.555547727376273
try #32: 4.555527776815261
try #33: 4.555540933824255
4.555532257016376

With average damping
try #1: 10.0
try #2: 6.5
try #3: 5.095215099176933
try #4: 4.668760681281611
try #5: 4.57585730576714
try #6: 4.559030116711325
try #7: 4.55613168520593
try #8: 4.555637206157649
try #9: 4.55555298754564
try #10: 4.555538647701617
4.555536206185039
#+end_example

* Exercise 1.37
1. An infinite continued fraction is an expression of the form
   \[
   f = \frac{N_1}{D_1 + \frac{N_2}{D_2 + \frac{N_3}{D_3 + \cdots}}}.
   \]
   As an example, one can show that the infinite continued fraction expansion with the $N_i$ and the $D_i$ all equal to 1 produces $1/\varphi$, where $\varphi$ is the golden ratio (described in 1.2.2). One way to approximate an infinite continued fraction is to truncate the expansion after a given number of terms. Such a truncation-a so-called finite continued fraction k-term finite continued fraction-has the form
   \[
   \frac{N_1}{D_1 + \frac{N_2}{\ddots + \frac{N_k}{D_k}}}.
   \]
   Suppose that n and d are procedures of one argument (the term index i) that return the $N_i$ and $D_i$ of the terms of the continued fraction. Define a procedure cont-frac such that evaluating (cont-frac n d k) computes the value of the k-term finite continued fraction. Check your procedure by approximating $1/\varphi$ using
   #+begin_src scheme :eval never
   (cont-frac (lambda (i) 1.0)
              (lambda (i) 1.0)
              k)
   #+end_src
   for successive values of k. How large must you make k in order to get an approximation that is accurate to 4 decimal places?

2. If your cont-frac procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.

** Solution
*** Recursive
#+begin_src scheme
(define (cont-frac n d k)
  (define (recurse i)
    (if (= i k)
        (/ (n k) (d k))
        (/ (n i) (+ (d i) (recurse (+ i 1))))))
  (recurse 1))

(define (search-k-approx f start target error)
  (if (<
       (abs (- (f start) target))
       error)
  start
  (search-k-approx f (+ start 1) target error)))

(display (search-k-approx
          (lambda (k)
            (cont-frac
             (lambda (i) 1.0)
             (lambda (i) 1.0)
             k))
         3
         0.61803398
         0.0001))
#+end_src

#+RESULTS:
: 10

*** Iterative
#+begin_src scheme
(define (cont-frac n d k)
  (define (iter k result)
    (if (= k 0)
        result
        (iter
         (- k 1)
         (/ (n k)
            (+ (d k) result)))))
  (iter (- k 1) (/ (n k) (d k))))

(define (search-k-approx f start target error)
  (if (<
       (abs (- (f start) target))
       error)
  start
  (search-k-approx f (+ start 1) target error)))

(display
 (search-k-approx
  (lambda (k)
    (cont-frac
     (lambda (i) 1.0)
     (lambda (i) 1.0)
     k))
  3
  0.61803398
  0.0001))
#+end_src

#+RESULTS:
: 10

* Exercise 1.38
In 1737, the Swiss mathematician Leonhard Euler published a memoir De Fractionibus Continuis, which included a continued fraction expansion for $e-2$, where $e$ is the base of the natural logarithms. In this fraction, the $N_i$ are all 1, and the $D_i$ are successively $1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, \cdots$. Write a program that uses your cont-frac procedure from Exercise 1.37 to approximate $e$, based on Euler’s expansion.

** Solution
#+begin_src scheme
(define (cont-frac n d k)
  (define (iter k result)
    (if (= k 0)
        result
        (iter
         (- k 1)
         (/ (n k)
            (+ (d k) result)))))
  (iter (- k 1) (/ (n k) (d k))))

(test-approximate 0.71828
  (cont-frac
   (lambda (i) 1.0)
   (lambda (i)
     (if (= (remainder i 3) 2)
         (* 2 (+ (quotient i 3) 1))
         1.0))
   12)
  0.00001)
#+end_src

* Exercise 1.39
A continued fraction representation of the tangent function was published in 1770 by the German mathematician J.H. Lambert:
\[
\tan{x} = \frac{x}{1 - \frac{x^2}{3 - \frac{x^2}{5 - \cdots}}},
\]
where $x$ is in radians. Define a procedure (tan-cf x k) that computes an approximation to the tangent function based on Lambert’s formula. k specifies the number of terms to compute, as in Exercise 1.37.

** Solution
#+begin_src scheme
(define (cont-frac n d k)
  (define (recurse i)
    (if (= i k)
        (/ (n k) (d k))
        (/ (n i) (+ (d i) (recurse (+ i 1))))))
  (recurse 1))

(define (tan-cf x k)
  (cont-frac
      (lambda (i)
        (if (= i 1)
            x
            (- (* x x))))
      (lambda (i)
        (- (* i 2) 1))
      k))

(test-approximate (tan 0.0) (tan-cf 0.0 10) 0.0001)
(test-approximate (tan 1.0) (tan-cf 1.0 10) 0.0001)
(test-approximate (tan 2.0) (tan-cf 2.0 10) 0.0001)
(test-approximate (tan 3.14159) (tan-cf 3.14159 10) 0.0001)
#+end_src

* Exercise 1.40
Define a procedure cubic that can be used together with the newtons-method procedure in expressions of the form
#+begin_src scheme :eval never
(newtons-method (cubic a b c) 1)
#+end_src
to approximate zeros of the cubic $x^3+ax^2+bx+c$.

** Solution
#+begin_src scheme
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       0.00001))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (deriv g dx)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))

(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x)
            ((deriv g 0.00001) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g)
               guess))

(define (cubic a b c)
  (lambda (x)
    (+ (cube x) (* a (square x)) (* b x) c)))

(test-approximate 0.0
  (let ((f (cubic 5 7 11)))
    (f (newtons-method f 1.0)))
  0.00001)
#+end_src

* Exercise 1.41
Define a procedure double that takes a procedure of one argument as argument and returns a procedure that applies the original procedure twice. For example, if inc is a procedure that adds 1 to its argument, then (double inc) should be a procedure that adds 2. What value is returned by
#+begin_src scheme :eval never
(((double (double double)) inc) 5)
#+end_src

** Solution
#+begin_src scheme
(define (double f)
  (lambda (x)
    (f (f x))))

(test-equal 3 ((double inc) 1))
(test-equal 21 (((double (double double)) inc) 5))
#+end_src

* Exercise 1.42
Let $f$ and $g$ be two one-argument functions. The composition $f$ after $g$ is defined to be the function $x \mapsto f(g(x))$. Define a procedure compose that implements composition. For example, if inc is a procedure that adds 1 to its argument,
#+begin_src scheme :eval never
((compose square inc) 6)
49
#+end_src

** Solution
#+begin_src scheme
(define (compose f g)
  (lambda (x) (f (g x))))

(test-equal 49 ((compose square inc) 6))
#+end_src

* Exercise 1.43
If $f$ is a numerical function and $n$ is a positive integer, then we can form the $n^{th}$ repeated application of $f$, which is defined to be the function whose value at $x$ is $f(f(\cdots(f(x))\cdots))$. For example, if $f$ is the function $x \mapsto x+1$, then the $n^{th}$ repeated application of $f$ is the function $x \mapsto x+n$. If $f$ is the operation of squaring a number, then the $n^{th}$ repeated application of $f$ is the function that raises its argument to the $2^n$-th power. Write a procedure that takes as inputs a procedure that computes $f$ and a positive integer $n$ and returns the procedure that computes the $n^{th}$ repeated application of $f$. Your procedure should be able to be used as follows:
#+begin_src scheme
((repeated square 2) 5)
625
#+end_src
Hint: You may find it convenient to use compose from Exercise 1.42.

** Solution
*** Using compose
**** iterative
#+begin_src scheme
(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (define (iter i composed)
    (if (= i n)
        composed
        (iter (inc i) (compose f composed))))
  (iter 1 f))

(test-equal 625 ((repeated square 2) 5))
#+end_src

**** recursive
#+begin_src scheme
(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (dec n)))))

(test-equal 625 ((repeated square 2) 5))
#+end_src

*** Not using compose
**** iterative
#+begin_src scheme
(define (repeated f n)
  (define (iter i result)
    (if (= i n)
        result
        (iter (inc i) (f result))))
  (lambda (x)
    (iter 0 x)))

(test-equal 625 ((repeated square 2) 5))
#+end_src

**** recursive
#+begin_src scheme
(define (repeated f n)
  (lambda (x)
    (define (recur n)
      (if (= n 1)
          (f x)
          (f (recur (dec n)))))
    (recur n)))

(test-equal 625 ((repeated square 2) 5))
#+end_src

* Exercise 1.44
The idea of smoothing a function is an important concept in signal processing. If $f$ is a function and $dx$ is some small number, then the smoothed version of $f$ is the function whose value at a point $x$ is the average of $f(x-dx)$, $f(x)$, and $f(x+dx)$. Write a procedure smooth that takes as input a procedure that computes $f$ and returns a procedure that computes the smoothed $f$. It is sometimes valuable to repeatedly smooth a function (that is, smooth the smoothed function, and so on) to obtain the n-fold smoothed function. Show how to generate the n-fold smoothed function of any given function using smooth and repeated from Exercise 1.43.

** Solution
#+begin_src scheme
;; from 1.43
(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (dec n)))))

;; 1.44 solution
(define (smooth f)
  (lambda (x)
    (let ((dx 0.00001))
     (/
      (+ (f (- x dx)) (f x) (f (+ x dx)))
      3))))

(define (n-fold-smooth f n)
  ((repeated smooth n) f))

(test-approximate 4 ((smooth square) 2) 0.0001)
(test-approximate 4 ((n-fold-smooth square 3) 2) 0.0001)
#+end_src

* Exercise 1.45
We saw in 1.3.3 that attempting to compute square roots by naively finding a fixed point of $y \mapsto x/y$ does not converge, and that this can be fixed by average damping. The same method works for finding cube roots as fixed points of the average-damped $y \mapsto x/y^2$. Unfortunately, the process does not work for fourth roots - a single average damp is not enough to make a fixed-point search for $y \mapsto x/y^3$ converge. On the other hand, if we average damp twice (i.e., use the average damp of the average damp of $y \mapsto x/y^3$) the fixed-point search does converge. Do some experiments to determine how many average damps are required to compute n^{th} roots as a fixed-point search based upon repeated average damping of $y \mapsto x/y^{n-1}$.. Use this to implement a simple procedure for computing n^{th} roots using fixed-point, average-damp, and the repeated procedure of Exercise 1.43. Assume that any arithmetic operations you need are available as primitives.

** Solution
#+begin_src scheme
;; from book samples
(define tolerance 0.0001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average x y)
  (/ (+ x y) 2))

(define (average-damp f)
  (lambda (x)
    (average x (f x))))

;; from 1.43
(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (dec n)))))

;; actual solution
(define (halve n)
    (if (even? n)
        (/ n 2)
        (/ (- n 1) 2)))

(define (root n x)
  (fixed-point
   ((repeated average-damp (halve n))
    (lambda (y)
      (/ x (expt y (- n 1)))))
   1.0))

(test-approximate 13 (root 4  (expt 13 4))  0.00001)
(test-approximate 13 (root 8  (expt 13 8))  0.0001)
(test-approximate 13 (root 16 (expt 13 16)) 0.01)
#+end_src

* Exercise 1.46
Several of the numerical methods described in this chapter are instances of an extremely general computational strategy known as iterative improvement. Iterative improvement says that, to compute something, we start with an initial guess for the answer, test if the guess is good enough, and otherwise improve the guess and continue the process using the improved guess as the new guess. Write a procedure iterative-improve that takes two procedures as arguments: a method for telling whether a guess is good enough and a method for improving a guess. Iterative-improve should return as its value a procedure that takes a guess as argument and keeps improving the guess until it is good enough. Rewrite the sqrt procedure of 1.1.7 and the fixed-point procedure of 1.3.3 in terms of iterative-improve.

** Solution
#+begin_src scheme
(define (iterative-improve test improve)
  (define (iter guess)
    (if (test guess)
        guess
        (iter (improve guess))))
  (lambda (guess)
    (iter guess)))

;; refactored sqrt
(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  ((iterative-improve good-enough? improve)
   1.0))

;; test sqrt
(test-approximate 1.4142 (sqrt 2) 0.0001)

;; refactored fixed-point
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       0.00001))
  ((iterative-improve
    (lambda (guess)
      (close-enough? guess (f guess)))
    f)
   first-guess))

;; test fixed-point
(define (approximate-phi)
  (fixed-point
   (lambda (x) (+ 1 (/ 1 x)))
   1.0))

(test-approximate 1.61803 (approximate-phi) 0.00001)
#+end_src
