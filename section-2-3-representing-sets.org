#+TITLE: 2.3 Example: Representing Sets

* Exercise 2.59
Implement the union-set operation for the unordered-list representation of sets.

** Solution
#+begin_src scheme
;; From the book
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))

;; Actual solution
(define (union-set set-a set-b)
  (if (null? set-b)
      set-a
      (union-set (adjoin-set (car set-b) set-a) (cdr set-b))))

;; Test
(define one-to-four (union-set '(4 2) '(1 2 3)))

(test-assert (element-of-set? 1 one-to-four))
(test-assert (element-of-set? 2 one-to-four))
(test-assert (element-of-set? 3 one-to-four))
(test-assert (element-of-set? 4 one-to-four))
(test-equal 4 (count one-to-four))

(test-equal 0 (count (union-set nil nil)))

#+end_src

* Exercise 2.60
We specified that a set would be represented as a list with no duplicates. Now suppose we allow duplicates. For instance, the set {1, 2, 3} could be represented as the list (2 3 2 1 3 2 2). Design procedures element-of-set?, adjoin-set, union-set, and intersection-set that operate on this representation. How does the efficiency of each compare with the corresponding procedure for the non-duplicate representation? Are there applications for which you would use this representation in preference to the non-duplicate one?

** Solution
#+begin_src scheme
;; Same as before O(n)
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

;; does not check fo duplicity O(1)
(define (adjoin-set x set)
  (cons x set))

;; does not check for duplicity O(n)
(define (union-set set-a set-b)
  (if (null? set-b)
      set-a
      (union-set (adjoin-set (car set-b) set-a) (cdr set-b))))

;; same as before O(n^2)
(define (intersection-set set-a set-b)
  (cond ((or (null? set-a) (null? set-b))
         '())
        ((element-of-set? (car set-a) set-b)
         (cons (car set-a)
               (intersection-set (cdr set-a) set-b)))
        (else
         (intersection-set (cdr set-a) set-b))))
#+end_src

* Exercise 2.61
Give an implementation of adjoin-set using the ordered representation. By analogy with element-of-set? show how to take advantage of the ordering to produce a procedure that requires on the average about half as many steps as with the unordered representation.

** Solution
#+begin_src scheme
(define (adjoin-set x set)
  (cond ((null? set)
         (cons x set))
        ((= x (car set))
         set)
        ((< x (car set))
         (cons x set))
        (else
         (cons (car set) (adjoin-set x (cdr set))))))

(test-equal '(1 2 3 4)
  (adjoin-set 3 '(1 2 4)))
(test-equal '(1 2 3 4)
  (adjoin-set 3 '(1 2 3 4)))
(test-equal '(1 2 3 4)
  (adjoin-set 4 '(1 2 3)))
(test-equal '(1 2 3 4)
  (adjoin-set 1 '(2 3 4)))
#+end_src

* Exercise 2.62
Give a $\theta(n)$ implementation of union-set for sets represented as ordered lists.

** Solution
#+begin_src scheme
(define (union-set set-a set-b)
  (cond ((null? set-b) set-a)
        ((null? set-a) set-b)
        (else
         (let ((x-a (car set-a))
               (x-b (car set-b)))
           (cond ((= x-a x-b)
                  (cons x-a (union-set (cdr set-a) (cdr set-b))))
                 ((< x-a x-b)
                  (cons x-a (union-set (cdr set-a) set-b)))
                 (else
                  (cons x-b (union-set set-a (cdr set-b)))))))))

(test-equal '()
  (union-set '() '()))

(test-equal '(1 2 3 4)
  (union-set '(1 2 3 4) '()))

(test-equal '(1 2 3 4)
  (union-set '() '(1 2 3 4)))

(test-equal '(1 2 3 4)
  (union-set '(1 2 4) '(1 2 3)))
#+end_src

* Exercise 2.63
Each of the following two procedures converts a binary tree to a list.

#+begin_src scheme :eval never
(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append
       (tree->list-1
        (left-branch tree))
       (cons (entry tree)
             (tree->list-1
              (right-branch tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list
         (left-branch tree)
         (cons (entry tree)
               (copy-to-list
                (right-branch tree)
                result-list)))))
  (copy-to-list tree '()))
#+end_src

1. Do the two procedures produce the same result for every tree?  If not, how do the results differ?  What lists do the two procedures produce for the trees in Figure 2.16?

2. Do the two procedures have the same order of growth in the number of steps required to convert a balanced tree with $n$ elements to a list?  If not,which one grows more slowly?

** Solution
1-A: Yes, both procedures produce the fully sorted lists of the given tree.

2-A: No. tree->list-1 has order of growth $\theta(n^2)$ since it resorts to append, at each step, while tree->list-2 is $\theta(n)$;

* Exercise 2.64
The following procedure list->tree converts an ordered list to a balanced binary tree. The helper procedure partial-tree takes as arguments an integer $n$ and list of at least $n$ elements and constructs a balanced tree containing the first $n$ elements of the list. The result returned by partial-tree is a pair (formed with cons) whose car is the constructed tree and whose cdr is the list of elements not included in the tree.

#+begin_src scheme :eval never
(define (list->tree elements)
  (car (partial-tree
        elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size
             (quotient (- n 1) 2)))
        (let ((left-result
               (partial-tree
                elts left-size)))
          (let ((left-tree
                 (car left-result))
                (non-left-elts
                 (cdr left-result))
                (right-size
                 (- n (+ left-size 1))))
            (let ((this-entry
                   (car non-left-elts))
                   (right-result
                   (partial-tree
                    (cdr non-left-elts)
                    right-size)))
              (let ((right-tree
                     (car right-result))
                    (remaining-elts
                     (cdr right-result)))
                (cons (make-tree this-entry
                                 left-tree
                                 right-tree)
                      remaining-elts))))))))
#+end_src

1. Write a short paragraph explaining as clearly as you can how partial-tree works.  Draw the tree produced by list->tree for the list (1 3 5 7 9 11).

2. What is the order of growth in the number of steps required by list->tree to convert a list of $n$ elements?

** Solution
partial-tree receives an ordered list of elements and the number of elements up to which it should work and returns a list whose car is the tree and cdr is the elements beyond n position. It works by splitting the first n elements of the list in three parts: the left part of the tree, the root and the right part. The left part and the right part are recursively solved. The order of growth for the number of steps is $\theta(n)$.

* Exercise 2.65
Use the results of Exercise 2.63 and Exercise 2.64 to give $\theta(n)$ implementations of union-set and intersection-set for sets implemented as (balanced) binary trees.

** Solution
#+begin_src scheme
(define (union-set tree-set-a tree-set-b)
  (define (union-list-set list-set-a list-set-b)
    (cond ((null? list-set-b) list-set-a)
          ((null? list-set-a) list-set-b)
          (else
           (let ((x-a (car list-set-a))
                 (x-b (car list-set-b)))
             (cond ((= x-a x-b)
                    (cons x-a
                          (union-list-set (cdr list-set-a)
                                          (cdr list-set-b))))
                   ((< x-a x-b)
                    (cons x-a
                          (union-list-set (cdr list-set-a)
                                          list-set-b)))
                   (else
                    (cons x-b
                          (union-list-set list-set-a
                                          (cdr list-set-b)))))))))
  (let ((list-set-a (tree->list tree-set-a))
        (list-set-b (tree->list tree-set-b)))
    (list->tree (union-list-set list-set-a list-set-b))))

(define (intersection-set tree-set-a tree-set-b)
  (define (intersection-list-set list-set-a list-set-b)
    (if (or (null? list-set-b)
            (null? list-set-a))
        '()
        (let ((x-a (car list-set-a))
                 (x-b (car list-set-b)))
             (cond ((= x-a x-b)
                    (cons x-a
                          (intersection-list-set (cdr list-set-a)
                                                 (cdr list-set-b))))
                   ((< x-a x-b)
                    (intersection-list-set (cdr list-set-a)
                                           list-set-b))
                   (else
                    (intersection-list-set list-set-a
                                           (cdr list-set-b)))))))
  (let ((list-set-a (tree->list tree-set-a))
        (list-set-b (tree->list tree-set-b)))
    (list->tree (intersection-list-set list-set-a list-set-b))))

;; Tests
(define even-set (list->tree '(2 4 6 8)))
(define uneven-set (list->tree '(1 3 5 7 9)))
(define up-to-five (list->tree '(1 2 3 4 5)))

;; union tests
(test-equal '(1 2 3 4 5 6 7 8 9)
  (tree->list (union-set even-set uneven-set)))

(test-equal '(1 2 3 4 5 6 8)
  (tree->list (union-set up-to-five even-set)))

(test-equal '(1 2 3 4 5)
  (tree->list (union-set up-to-five '())))

;; intersection tests
(test-equal '()
  (tree->list (intersection-set even-set uneven-set)))

(test-equal '(2 4)
  (tree->list (intersection-set up-to-five even-set)))

(test-equal '()
  (tree->list (intersection-set up-to-five '())))
#+end_src

* Exercise 2.66
Implement the lookup procedure for the case where the set of records is structured as a binary tree, ordered by the numerical values of the keys.

** Solution
#+begin_src scheme
;; from the book
(define (key entry) entry)

(define (lookup given-key set-of-records)
  (if (null? set-of-records)
      false
      (let ((current-record (car set-of-records)))
        (cond ((= given-key (key current-record))
               current-record)
              ((< given-key (key current-record))
               (lookup given-key (left-branch set-of-records)))
              (else
               (lookup given-key (right-branch set-of-records)))))))

;; Tests
(define primes (list->tree '(2 3 5 7)))

(test-equal 2 (lookup 2 primes))
(test-equal 3 (lookup 3 primes))
(test-equal 7 (lookup 7 primes))
(test-assert (not (lookup 4 primes)))
(test-assert (not (lookup 9 primes)))
#+end_src
