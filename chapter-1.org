#+title: Chapter 1 Exercises
#+property: header-args :session :results value

#+begin_src scheme
(use-modules (sicp-test))
#+end_src

* Exercise 1.1
Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.

#+begin_src scheme
  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
      b
      a)
  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
  (+ 2 (if (> b a) b a))
  (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
#+end_src

** Solution
#+begin_src scheme
  10
  12
  8
  3
  6


  19
  #f
  4
  16
  6
  16
#+end_src

#+RESULTS:
: 16

* Exercise 1.2
Translate the following expression into prefix form:
    5 + 4 + (2 − (3 − (6 + 4/5)))
    -----------------------------
           3(6 − 2)(2 − 7)

** Solution
#+begin_src scheme
(/
 (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
 (* 3 (- 6 2) (- 2 7)))
#+end_src

#+RESULTS:
: -37/150

* Exercise 1.3
Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

** Solution
#+begin_src scheme :session :results output
(define (weird-sum-of-squares a b c)
  (define x (if (> a b) a b))
  (define y (cond
             ((or (> c a) (> c b)) c)
             ((< a  b) a)
             (else b)))
  (+ (* x x) (* y y)))

(assert
 (=
  25
  (weird-sum-of-squares 2 3 4)
  (weird-sum-of-squares 2 4 3)
  (weird-sum-of-squares 3 2 4)
  (weird-sum-of-squares 3 4 2)
  (weird-sum-of-squares 4 2 3)
  (weird-sum-of-squares 4 3 2)))
(display "Ok!")
#+end_src

#+RESULTS:
: Ok!


* Exercise 1.4
Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:

#+begin_src scheme
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+end_src

** Solution
The result of the if expression is the symbol for the operator applied to a and b, because of applicative-order evaluation.

* Exercise 1.6
Alyssa P. Hacker doesn't see why if needs to be provided as a special form. “Why can’t I just define it as an ordinary procedure in terms of cond?” she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:

#+begin_src scheme
(define (new-if predicate
                then-clause
                else-clause)
  (cond (predicate 'then-clause)
        (else 'else-clause)))

(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))

#+end_src

#+RESULTS:
: #<unspecified>

Eva demonstrates the program for Alyssa:

#+begin_src scheme
  (new-if (= 2 3) 0 5)
  5

  (new-if (= 1 1) 0 5)
  0
#+end_src

#+RESULTS:
: 0

Delighted, Alyssa uses new-if to rewrite the square-root program:

#+begin_src scheme
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src

#+RESULTS:
: #<unspecified>

What happens when Alyssa attempts to use this to compute square roots? Explain.

** Solution
As new-if is a regular procedure, so, it's arguments get evaluated first and that leads to a infinite recursion of sqrt-iter. The special form if, on the other hand, evaluate the consequent only if the predicate is true, the alternative get evaluated only if otherwise.

* Exercise 1.7
The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

** Solution
#+begin_src scheme :session :results output
(define (good-enough? last-guess guess)
  (< (abs (- 1 (/ last-guess guess))) 0.001))

(define (improve guess x)
  (/ (+ guess (/ x guess)) 2))

(define (sqrt-iter x last-guess guess)
  (if (good-enough? last-guess guess)
      guess
      (sqrt-iter x guess (improve guess x))))

(define (sqrt x)
  (sqrt-iter x 0.0 1.0))

(assert-approximation 100000.0 (sqrt 10000000000.0))
(display "Ok!")
#+end_src

#+RESULTS:
: Ok!


* Exercise 1.8
Newton’s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value:

    x/y^2 + 2y
    ----------
        3

Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In 1.3.4 we will see how to implement Newton’s method in general as an abstraction of these square-root and cube-root procedures.)

** Solution
#+begin_src scheme :session :results output
(define (improve-cube-root-guess y x)
  (/ (+ (/ x (* y y)) (* 2 y)) 3))

(define (cube-root-iter x last-guess guess)
  (if (good-enough? last-guess guess)
      guess
      (cube-root-iter x guess (improve-cube-root-guess guess x))))

(define (cube-root x)
  (cube-root-iter x 0.0 1.0))

(assert-approximation 3 (cube-root 27))
(display "Ok!")
#+end_src

#+RESULTS:
: Ok!

* Exercise 1.9
Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.

#+begin_src scheme
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
#+end_src

Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

** Solution
*** First procedure
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9

*** Second procedure
(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 7)
(+ (dec 2) (inc 7))
(+ 1 8)
(+ (dec 1) (inc 8))
(+ 0 9)
9

* Exercise 1.10
The following procedure computes a mathematical function called Ackermann’s function.
#+begin_src scheme :session
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
#+end_src

What are the values of the following expressions?
#+begin_src scheme :session
  (A 1 10)
  (A 2 4)
  (A 3 3)
#+end_src

#+RESULTS:
: 65536

Consider the following procedures, where A is the procedure defined above:
#+begin_src scheme :session
  (define (f n) (A 0 n))
  (define (g n) (A 1 n))
  (define (h n) (A 2 n))
  (define (k n) (* 5 n n))
#+end_src

Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n^2.

** Solution
1024
65536
65536

(f n) = 2n
(g n) = 2^n
(h n) = 2^(n^n)

* Exercise 1.11
A function f is defined by the rule that f(n)=n if n<3 and f(n)=f(n−1)+2f(n−2)+3f(n−3) if n≥3. Write a procedure that computes f by means of a recursive process. Write a procedure that computes f by means of an iterative process.

** Solution
#+name: recursive
#+begin_src scheme :session :results output
(define (f n)
  (if (< n 3)
      n
      (+
       (f (- n 1))
       (* 2 (f (- n 2)))
       (* 3 (f (- n 3))))))

(assert-equal 0 (f 0))
(assert-equal 1 (f 1))
(assert-equal 2 (f 2))
(assert-equal 4 (f 3))
(assert-equal 11 (f 4))
(assert-equal 25 (f 5))
(display "Ok!")
#+end_src

#+RESULTS: recursive
: Ok!

#+name: iterative
#+begin_src scheme :results output
(define (f n)
  (define (f-step n-1 n-2 n-3)
    (+ n-1 (* 2 n-2) (* 3 n-3)))
  (define (f-iter n-1 n-2 n-3 count)
    (if (= count 0)
        n-1
        (f-iter (f-step n-1 n-2 n-3) n-1 n-2 (- count 1))))
  (if (< n 3)
      n
      (f-iter 2 1 0 (- n 2))))

(assert-equal 0 (f 0))
(assert-equal 1 (f 1))
(assert-equal 2 (f 2))
(assert-equal 4 (f 3))
(assert-equal 11 (f 4))
(assert-equal 25 (f 5))
(display "Ok!")
#+end_src

#+RESULTS: iterative
: Ok!

* Exercise 1.12
The following pattern of numbers is called Pascal’s triangle.

         1
       1   1
     1   2   1
   1   3   3   1
 1   4   6   4   1
       . . .
The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a procedure that computes elements of Pascal’s triangle by means of a recursive process.

** Solution
#+begin_src scheme :results output
(define (pascal-triangle r k)
  (if (or (= r 1) (< k 2) (>= k r))
       1
       (+
        (pascal-triangle (- r 1) (- k 1))
        (pascal-triangle (- r 1) k))))

(assert-equal 6 (pascal-triangle 5 3))
(display "Ok!")
#+end_src

#+RESULTS:
: Ok!

* Scratch
#+begin_src scheme :session
(define (fib n)
  (define (fib-iter a b count)
    (if (= count 0)
        b
        (fib-iter (+ a b) a (- count 1))))
  (fib-iter 1 0 n))


(assert-equal 5 (fib 5))
#+end_src

#+RESULTS:

#+begin_src scheme
(define (count-change amount)
    (cc amount 5))
  (define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0)
             (= kinds-of-coins 0))
         0)
        (else
         (+ (cc amount (- kinds-of-coins 1))
            (cc (- amount (first-denomination
                           kinds-of-coins))
                kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

(assert-equal 292 (count-change 100))
#+end_src

#+RESULTS:

# Local Variables:
# eval: (olivetti-mode 1)
# End:
