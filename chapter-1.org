#+TITLE: Chapter 1 Exercises
#+PROPERTY: header-args :results output

* Exercise 1.1
Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.

#+begin_src scheme :eval never
  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
      b
      a)
  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
  (+ 2 (if (> b a) b a))
  (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
#+end_src

** Solution
#+begin_src scheme
  10
  12
  8
  3
  6


  19
  #f
  4
  16
  6
  16
#+end_src

* Exercise 1.2
Translate the following expression into prefix form:
    5 + 4 + (2 − (3 − (6 + 4/5)))
    -----------------------------
           3(6 − 2)(2 − 7)

** Solution
#+begin_src scheme
(/
 (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
 (* 3 (- 6 2) (- 2 7)))
#+end_src

#+RESULTS:

* Exercise 1.3
Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

** Solution
#+begin_src scheme
(define (weird-sum-of-squares a b c)
  (define x (if (> a b) a b))
  (define y (cond
             ((or (> c a) (> c b)) c)
             ((< a  b) a)
             (else b)))
  (+ (* x x) (* y y)))

(test-begin "1.3 sum-of-squares")
(test-assert
    (=
     25
     (weird-sum-of-squares 2 3 4)
     (weird-sum-of-squares 2 4 3)
     (weird-sum-of-squares 3 2 4)
     (weird-sum-of-squares 3 4 2)
     (weird-sum-of-squares 4 2 3)
     (weird-sum-of-squares 4 3 2)))
(test-end)
#+end_src

#+RESULTS:
:  Ok: 1 tests passed.

* Exercise 1.4
Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:

#+begin_src scheme :eval never
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+end_src

** Solution
The result of the if expression is the symbol for the operator applied to a and b, because of applicative-order evaluation.

* Exercise 1.5
Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

#+begin_src scheme :eval never
(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))
#+end_src

Then he evaluates the expression
#+begin_src scheme :eval never
(test 0 (p))
#+end_src

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)

** Solution
For applicative-order evaluation the interpreter will try to solve (p) indefinitely. For normal-order evaluation the result is 0.

* Exercise 1.6
Alyssa P. Hacker doesn't see why if needs to be provided as a special form. “Why can’t I just define it as an ordinary procedure in terms of cond?” she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:

#+begin_src scheme :eval never
(define (new-if predicate
                then-clause
                else-clause)
  (cond (predicate 'then-clause)
        (else 'else-clause)))

(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src

Eva demonstrates the program for Alyssa:
#+begin_example
> (new-if (= 2 3) 0 5)
$1 = 5

> (new-if (= 1 1) 0 5)
$2= 0
#+end_example

Delighted, Alyssa uses new-if to rewrite the square-root program:
#+begin_src scheme :eval never
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src

What happens when Alyssa attempts to use this to compute square roots? Explain.

** Solution
As new-if is a regular procedure, so, it's arguments get evaluated first and that leads to a infinite recursion of sqrt-iter. The special form if, on the other hand, evaluate the consequent only if the predicate is true, the alternative get evaluated only if otherwise.

* Exercise 1.7
The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

** Solution
#+begin_src scheme
(define (good-enough? last-guess guess)
  (< (abs (- 1 (/ last-guess guess))) 0.001))

(define (improve guess x)
  (/ (+ guess (/ x guess)) 2))

(define (sqrt-iter x last-guess guess)
  (if (good-enough? last-guess guess)
      guess
      (sqrt-iter x guess (improve guess x))))

(define (sqrt x)
  (sqrt-iter x 0.0 1.0))

(test-begin "1.7 - iterative sqrt")
(test-approximate 100000.0 (sqrt 10000000000.0) 0.001)
(test-end)
#+end_src

#+RESULTS:
:  Ok: 1 tests passed.

* Exercise 1.8
Newton’s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value:

    x/y^2 + 2y
    ----------
        3

Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In 1.3.4 we will see how to implement Newton’s method in general as an abstraction of these square-root and cube-root procedures.)

** Solution
#+begin_src scheme
(define (improve-cube-root-guess y x)
  (/ (+ (/ x (* y y)) (* 2 y)) 3))

(define (cube-root-iter x last-guess guess)
  (if (good-enough? last-guess guess)
      guess
      (cube-root-iter x guess (improve-cube-root-guess guess x))))

(define (cube-root x)
  (cube-root-iter x 0.0 1.0))

(test-begin "1.8 - iterative cube root")
(test-approximate 3 (cube-root 27) 0.001)
(test-end)
#+end_src

#+RESULTS:
:  Ok: 1 tests passed.

* Exercise 1.9
Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.
#+begin_src scheme :eval never
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
#+end_src

Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

** Solution
*** First procedure
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9

*** Second procedure
(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 7)
(+ (dec 2) (inc 7))
(+ 1 8)
(+ (dec 1) (inc 8))
(+ 0 9)
9

* Exercise 1.10
The following procedure computes a mathematical function called Ackermann’s function.
#+begin_src scheme :eval never
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
#+end_src

What are the values of the following expressions?
#+begin_src scheme :session :eval never
  (A 1 10)
  (A 2 4)
  (A 3 3)
#+end_src

Consider the following procedures, where A is the procedure defined above:
#+begin_src scheme :eval never
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
#+end_src

Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n^2.

** Solution
1024
65536
65536

(f n) = 2n
(g n) = 2^n
(h n) = 2^(n^n)

* Exercise 1.11
A function f is defined by the rule that f(n)=n if n<3 and f(n)=f(n−1)+2f(n−2)+3f(n−3) if n≥3. Write a procedure that computes f by means of a recursive process. Write a procedure that computes f by means of an iterative process.

** Solution
#+name: recursive
#+begin_src scheme
(define (f n)
  (if (< n 3)
      n
      (+
       (f (- n 1))
       (* 2 (f (- n 2)))
       (* 3 (f (- n 3))))))

(test-begin "1.11 - recursive")
(test-equal 0 (f 0))
(test-equal 1 (f 1))
(test-equal 2 (f 2))
(test-equal 4 (f 3))
(test-equal 11 (f 4))
(test-equal 25 (f 5))
(test-end)
#+end_src

#+RESULTS: recursive
:  Ok: 6 tests passed.

#+name: iterative
#+begin_src scheme
(define (f n)
  (define (f-step n-1 n-2 n-3)
    (+ n-1 (* 2 n-2) (* 3 n-3)))
  (define (f-iter n-1 n-2 n-3 count)
    (if (= count 0)
        n-1
        (f-iter (f-step n-1 n-2 n-3) n-1 n-2 (- count 1))))
  (if (< n 3)
      n
      (f-iter 2 1 0 (- n 2))))

(test-begin "1.11 - iterative")
(test-equal 0 (f 0))
(test-equal 1 (f 1))
(test-equal 2 (f 2))
(test-equal 4 (f 3))
(test-equal 11 (f 4))
(test-equal 25 (f 5))
(test-end)
#+end_src

#+RESULTS: iterative
:  Ok: 6 tests passed.

* Exercise 1.12
The following pattern of numbers is called Pascal’s triangle.

         1
       1   1
     1   2   1
   1   3   3   1
 1   4   6   4   1
       . . .
The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a procedure that computes elements of Pascal’s triangle by means of a recursive process.

** Solution
#+begin_src scheme
(define (pascal-triangle r k)
  (if (or (= r 1) (< k 2) (>= k r))
       1
       (+
        (pascal-triangle (- r 1) (- k 1))
        (pascal-triangle (- r 1) k))))

(test-begin "1.12 - pascal triangle")
(test-equal 6 (pascal-triangle 5 3))
(test-end)
#+end_src

#+RESULTS:
:  Ok: 1 tests passed.

* Exercise 1.16
Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does fast-expt. (Hint: Using the observation that $(b^(n/2))^2 = (b^2)^(n/2)$, keep, along with the exponent n and the base b, an additional state variable a, and define the state transformation in such a way that the product ab^n is unchanged from state to state. At the beginning of the process a is taken to be 1, and the answer is given by the value of a at the end of the process. In general, the technique of defining an invariant quantity that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)

** Solution
#+begin_src scheme
(define (expt b n)
  (define (even? n) (= 0 (remainder n 2)))
  (define (expt-iter b n a)
    (cond ((= n 0) a)
          ((even? n) (expt-iter (* b b) (/ n 2) a))
          (else  (expt-iter b (- n 1) (* a b)))))
  (expt-iter b n 1))

(test-begin "1.16 - Iterative exponentiation in O(log2 n) time")
(test-equal 1 (expt 10 0))
(test-equal 7 (expt 7 1))
(test-equal 9 (expt 3 2))
(test-equal 125 (expt 5 3))
(test-equal 625 (expt 5 4))
(test-equal 32 (expt 2 5))
(test-equal 729 (expt 3 6))
(test-equal 78125 (expt 5 7))
(test-equal 256 (expt 2 8))
(test-equal 19683 (expt 3 9))
(test-end)
#+end_src

#+RESULTS:
:  Ok: 10 tests passed.

* Exercise 1.17
The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the expt procedure:

#+begin_src scheme :eval never
(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b 1)))))
#+end_src

This algorithm takes a number of steps that is linear in b. Now suppose we include, together with addition, operations double, which doubles an integer, and halve, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to fast-expt that uses a logarithmic number of steps.

** Solution
#+begin_src scheme
(define (even? n) (= 0 (remainder n 2)))
(define (halve n) (/ n 2))
(define (multi a b)
    (cond ((= b 0) 0)
          ((even? b) (multi (+ a a) (halve b)))
          (else  (+ a (multi a (- b 1) )))))

(test-begin "1.17 - Recursive multiplication in O(log2 n) time")
(test-equal 0 (multi 10 0))
(test-equal 7 (multi 7 1))
(test-equal 6 (multi 3 2))
(test-equal 15 (multi 5 3))
(test-equal 20 (multi 5 4))
(test-equal 10 (multi 2 5))
(test-equal 18 (multi 3 6))
(test-equal 35 (multi 5 7))
(test-equal 16 (multi 2 8))
(test-equal 27 (multi 3 9))
(test-end)
#+end_src


#+RESULTS:
:  Ok: 10 tests passed.

* Exercise 1.18
Using the results of Exercise 1.16 and Exercise 1.17, devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.

** Solution
#+begin_src scheme
(define (multi a b)
  (define (even? n) (= 0 (remainder n 2)))
  (define (halve n) (/ n 2))
  (define (multi-iter a b c)
    (cond ((= b 0) c)
          ((even? b) (multi-iter (+ a a) (halve b) c))
          (else  (multi-iter a (- b 1) (+ c a)))))
  (multi-iter a b 0))

(test-begin "1.18 - Iterative multiplication in O(log2 n) time")
(test-equal 0 (multi 10 0))
(test-equal 7 (multi 7 1))
(test-equal 6 (multi 3 2))
(test-equal 15 (multi 5 3))
(test-equal 20 (multi 5 4))
(test-equal 10 (multi 2 5))
(test-equal 18 (multi 3 6))
(test-equal 35 (multi 5 7))
(test-equal 16 (multi 2 8))
(test-equal 27 (multi 3 9))
(test-end)
#+end_src

#+RESULTS:
:  Ok: 10 tests passed.

* Exercise 1.19
There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables a and b in the fib-iter process of 1.2.2: a ← a + b and b ← a. Call this transformation T, and observe that applying T over and over again n times, starting with 1 and 0, produces the pair Fib(n + 1) and Fib(n). In other words, the Fibonacci numbers are produced by applying T^n, the nth power of the transformation T, starting with the pair (1, 0). Now consider T to be the special case of p = 0 and q = 1 in a family of transformations T_pq, where T_pq transforms the pair (a, b) according to a ← bq + aq + ap and b ← bp + aq. Show that if we apply such a transformation T_pq twice, the effect is the same as using a single transformation T_p′q′ of the same form, and compute p′ and q′ in terms of p and q. This gives us an explicit way to square these transformations, and thus we can compute T^n using successive squaring, as in the fast-expt procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps:

#+begin_src scheme :eval never
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0)
         b)
        ((even? count)
         (fib-iter a
                   b
                   ⟨??⟩  ;compute p'
                   ⟨??⟩  ;compute q'
                   (/ count 2)))
        (else
         (fib-iter (+ (* b q)
                      (* a q)
                      (* a p))
                   (+ (* b p)
                      (* a q))
                   p
                   q
                   (- count 1)))))
#+end_src

** Solution
#+begin_src scheme
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (let ((p-squared (* p p))
               (q-squared (* q q)))
           (fib-iter a
                   b
                   (+ p-squared q-squared)
                   (+ q-squared (* 2 p q))
                   (/ count 2))))
        (else
         (let ((aq (* a q)))
           (fib-iter (+ (* b q)
                        aq
                        (* a p))
                     (+ (* b p)
                        aq)
                     p
                     q
                     (- count 1))))))

(test-begin "1.18 - Iterative Fibonacci calculation in O(log2 n) time")
(test-equal 1  (fib 1))
(test-equal 1  (fib 2))
(test-equal 2  (fib 3))
(test-equal 3  (fib 4))
(test-equal 5  (fib 5))
(test-equal 8  (fib 6))
(test-equal 13 (fib 7))
(test-equal 610 (fib 15))
(test-equal 1548008755920 (fib 60))
(test-equal 2880067194370816120 (fib 90))
(test-end)
#+end_src

#+RESULTS:
:  Ok: 10 tests passed.

* Exercise 1.20
The process that a procedure generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative gcd procedure given above. Suppose we were to interpret this procedure using normal-order evaluation, as discussed in 1.1.5. (The normal-order-evaluation rule for if is described in Exercise 1.5.) Using the substitution method (for normal order), illustrate the process generated in evaluating (gcd 206 40) and indicate the remainder operations that are actually performed. How many remainder operations are actually performed in the normal-order evaluation of (gcd 206 40)? In the applicative-order evaluation?

** Solution
For normal-order evaluation the number of remainder operations executed is 18. For applicative-order evaluation, 4.

* Exercise 1.21
Use the smallest-divisor procedure to find the smallest divisor of each of the following numbers: 199, 1999, 19999.

** Solution
> (smallest-divisor 199)
$1 = 199
> (smallest-divisor 1999)
$2 = 1999
> (smallest-divisor 19999)
$3 = 7

* Exercise 1.22
Most Lisp implementations include a primitive called runtime that returns an integer that specifies the amount of time the system has been running (measured, for example, in microseconds). The following timed-prime-test procedure, when called with an integer n, prints n and checks to see if n is prime. If n is prime, the procedure prints three asterisks followed by the amount of time used in performing the test.

#+begin_src scheme :eval never
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime)
                       start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
#+end_src

Using this procedure, write a procedure search-for-primes that checks the primality of consecutive odd integers in a specified range. Use your procedure to find the three smallest primes larger than 1000; larger than 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to test each prime. Since the testing algorithm has order of growth of Θ(n), you should expect that testing for primes around 10,000 should take about 10 times as long as testing for primes around 1000. Do your timing data bear this out? How well do the data for 100,000 and 1,000,000 support the Θ(n) prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?

** Solution
#+begin_src scheme
(load-from-path "1_22-definitions.scm")
(define (search-for-primes start)
  (define (search-for-primes-iter n count)
    (if (> count 0)
        (search-for-primes-iter
         (+ n 2)
         (if (timed-prime-test n) (- count 1) count))))
  (search-for-primes-iter
   (if (even? start) (+ start 1) start)
   3))
#+end_src

> (search-for-primes 100000)
100003 | 71004
100019 | 69836
100043 | 69686

> (search-for-primes 1000000)
1000003 | 413345
1000033 | 417740
1000037 | 417630

> (search-for-primes 10000000)
10000019 | 692164
10000079 | 673696
10000103 | 697857

> (search-for-primes 100000000)
100000007 | 1731865
100000037 | 1448142
100000039 | 1630682

Let m be the mean time for the three smallest primes greater than 100000 and T_n to be the measured time (in nanoseconds) to check for primality of n. If m is taken take as the standard computation time for prime test, the deviation, D_n, from the expected computation time is:

D_n = T_n - m*(sqrt(n)/sqrt(100000))

Observed mean:
m = 70175

|         n | T_n (ns) |           D_n |
|-----------+----------+---------------|
|   1000003 |   413345 |     191431.83 |
|   1000033 |   417740 |     195823.50 |
|   1000037 |   417630 |     195713.06 |
|  10000019 |   692164 |    -9586.6667 |
|  10000079 |   673696 |    -28056.772 |
|  10000103 |   697857 |    -3896.6140 |
| 100000007 |  1731865 |    -487263.43 |
| 100000037 |  1448142 |    -770986.76 |
| 100000039 |  1630682 |    -588446.78 |
|-----------+----------+---------------|
|  Variance |       -- | 137875470000. |
#+tblfm: $3=$2-70175*(sqrt($1)/sqrt(100000))::@11$3=vvar(@I..@II)

* Exercise 1.23
* Footer
# Local Variables:
# eval: (olivetti-mode 1)
# eval: (flyspell-mode 1)
# ispell-local-dictionary: "american"
# End:
