#+title: 1.2.6 - Example: Testing for Primality

* Exercise 1.20
The process that a procedure generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative gcd procedure given above. Suppose we were to interpret this procedure using normal-order evaluation, as discussed in 1.1.5. (The normal-order-evaluation rule for if is described in Exercise 1.5.) Using the substitution method (for normal order), illustrate the process generated in evaluating (gcd 206 40) and indicate the remainder operations that are actually performed. How many remainder operations are actually performed in the normal-order evaluation of (gcd 206 40)? In the applicative-order evaluation?

** Solution
For normal-order evaluation the number of remainder operations executed is 18. For applicative-order evaluation, 4.

* Exercise 1.21
Use the smallest-divisor procedure to find the smallest divisor of each of the following numbers: 199, 1999, 19999.

** Solution
#+begin_example
> (smallest-divisor 199)
$1 = 199
> (smallest-divisor 1999)
$2 = 1999
> (smallest-divisor 19999)
$3 = 7
#+end_example

* Exercise 1.22
Most Lisp implementations include a primitive called runtime that returns an integer that specifies the amount of time the system has been running (measured, for example, in microseconds). The following timed-prime-test procedure, when called with an integer n, prints n and checks to see if n is prime. If n is prime, the procedure prints three asterisks followed by the amount of time used in performing the test.

#+begin_src scheme :eval never
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime)
                       start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
#+end_src

Using this procedure, write a procedure search-for-primes that checks the primality of consecutive odd integers in a specified range. Use your procedure to find the three smallest primes larger than 1000; larger than 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to test each prime. Since the testing algorithm has order of growth of $\theta(n)$, you should expect that testing for primes around 10,000 should take about 10 times as long as testing for primes around 1000. Do your timing data bear this out? How well do the data for 100,000 and 1,000,000 support the $\theta(n)$ prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?

** Solution
#+begin_src scheme
(load-from-path "1_22-definitions.scm")
(define (search-for-primes start)
  (define (search-for-primes-iter n count)
    (if (> count 0)
        (search-for-primes-iter
         (+ n 2)
         (if (timed-prime-test n) (- count 1) count))))
  (search-for-primes-iter
   (if (divides? 2 start) (+ start 1) start)
   3))
#+end_src

#+begin_example
> (search-for-primes 100000)
100003 | 71004
100019 | 69836
100043 | 69686

> (search-for-primes 1000000)
1000003 | 413345
1000033 | 417740
1000037 | 417630

> (search-for-primes 10000000)
10000019 | 692164
10000079 | 673696
10000103 | 697857

> (search-for-primes 100000000)
100000007 | 1731865
100000037 | 1448142
100000039 | 1630682
#+end_example

Let m be the mean time for the three smallest primes greater than 100000 and T_n to be the measured time (in nanoseconds) to check for primality of n. If m is taken take as the standard computation time for prime test, the deviation, D_n, from the expected computation time is:

\[
D_n = T_n - m\left(\frac{\sqrt{n}}{\sqrt{100000}}\right)
\]

Observed mean:
m = 70175

|         n | T_n (ns) |           D_n |
|-----------+----------+---------------|
|   1000003 |   413345 |     191431.83 |
|   1000033 |   417740 |     195823.50 |
|   1000037 |   417630 |     195713.06 |
|  10000019 |   692164 |    -9586.6667 |
|  10000079 |   673696 |    -28056.772 |
|  10000103 |   697857 |    -3896.6140 |
| 100000007 |  1731865 |    -487263.43 |
| 100000037 |  1448142 |    -770986.76 |
| 100000039 |  1630682 |    -588446.78 |
|-----------+----------+---------------|
|  Variance |       -- | 137875470000. |
#+tblfm: $3=$2-70175*(sqrt($1)/sqrt(100000))::@11$3=vvar(@I..@II)

* Exercise 1.23
The smallest-divisor procedure shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for test-divisor should not be 2, 3, 4, 5, 6, …, but rather 2, 3, 5, 7, 9, …. To implement this change, define a procedure next that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. Modify the smallest-divisor procedure to use (next test-divisor) instead of (+ test-divisor 1). With timed-prime-test incorporating this modified version of smallest-divisor, run the test for each of the 12 primes found in Exercise 1.22. Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2?

** Solution
#+begin_src scheme :eval query
(load-from-path "1_23-definitions.scm")
(search-for-primes 100000)
(search-for-primes 1000000)
(search-for-primes 10000000)
(search-for-primes 100000000)
#+end_src

#+RESULTS:
#+begin_example
100003 | 28128
100019 | 10090
100043 | 10186
1000003 | 29715
1000033 | 29531
1000037 | 29554
10000019 | 91376
10000079 | 91356
10000103 | 91318
100000007 | 289935
100000037 | 289866
100000039 | 301755
#+end_example


|         n | T_n (ns) | T2_n (ns) |   T_n/T2_n |
|-----------+----------+-----------+------------|
|    100003 |    71004 |     28128 |  1.7497720 |
|    100019 |    69836 |     10090 |  1.7098227 |
|    100043 |    69686 |     10186 |  1.8632122 |
|   1000003 |   413345 |     29715 |  3.6276472 |
|   1000033 |   417740 |     29531 |  3.7525377 |
|   1000037 |   417630 |     29554 |  3.7956357 |
|  10000019 |   692164 |     91376 |  1.1983781 |
|  10000079 |   673696 |     91356 |  1.1906816 |
|  10000103 |   697857 |     91318 |  1.1779986 |
| 100000007 |  1731865 |    289935 |  1.5999182 |
| 100000037 |  1448142 |    289866 | 0.68569829 |
| 100000039 |  1630682 |    301755 | 0.74455436 |
#+TBLFM: $4=$2/$3

* Exercise 1.24
Modify the timed-prime-test procedure of Exercise 1.22 to use fast-prime? (the Fermat method), and test each of the 12 primes you found in that exercise. Since the Fermat test has $\theta(log n)$ growth, how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000? Do your data bear this out? Can you explain any discrepancy you find?

** Solution
#+begin_src scheme :eval query
(load-from-path "1_24-definitions.scm")
(timed-prime-test 100003)
(timed-prime-test 100019)
(timed-prime-test 100043)
(timed-prime-test 1000003)
(timed-prime-test 1000033)
(timed-prime-test 1000037)
(timed-prime-test 10000019)
(timed-prime-test 10000079)
(timed-prime-test 10000103)
(timed-prime-test 100000007)
(timed-prime-test 100000037)
(timed-prime-test 100000039)
#+end_src

#+RESULTS:
#+begin_example
100003 | 14723
100019 | 28481
100043 | 6019
1000003 | 4187
1000033 | 4104
1000037 | 4228
10000019 | 6296
10000079 | 5024
10000103 | 4929
100000007 | 5661
100000037 | 5435
100000039 | 7817
#+end_example

\[
D_n = \frac{T3_n}{T2_n} - \frac{\log{n}}{\sqrt{n}}
\]

|         n | T2_n (ns) | T3_n (ns) |         D_n |
|-----------+-----------+-----------+-------------|
|    100003 |     28128 |      1472 | 0.015925580 |
|    100019 |     10090 |      2848 |  0.24585545 |
|    100043 |     10186 |      6019 |  0.55450849 |
|   1000003 |     29715 |      4187 |  0.12708977 |
|   1000033 |     29531 |      4104 |  0.12515729 |
|   1000037 |     29554 |      4228 |  0.12924487 |
|  10000019 |     91376 |      6296 | 0.063805134 |
|  10000079 |     91356 |      5024 | 0.049896679 |
|  10000103 |     91318 |      4929 | 0.048879249 |
| 100000007 |    289935 |      5661 | 0.017682998 |
| 100000037 |    289866 |      5435 | 0.016907975 |
| 100000039 |    301755 |      7817 | 0.024063054 |
#+tblfm: $4=$3/$2 - log($1)/sqrt($1)

* Exercise 1.25
Alyssa P. Hacker complains that we went to a lot of extra work in writing expmod. After all, she says, since we already know how to compute exponentials, we could have simply written

#+begin_src scheme :eval never
(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
#+end_src

Is she correct? Would this procedure serve as well for our fast prime tester? Explain.

** Solution
While mathematically both functions are equivalent, Alissa P Hacker solution will produce very large intermediate results that will slowdown the computation or even make the calculation impractical.

* Exercise 1.26
Louis Reasoner is having great difficulty doing Exercise 1.24. His fast-prime? test seems to run more slowly than his prime? test. Louis calls his friend Eva Lu Ator over to help. When they examine Louis’s code, they find that he has rewritten the expmod procedure to use an explicit multiplication, rather than calling square:

#+begin_src scheme :eval never
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (* (expmod base (/ exp 2) m)
             (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base
             (expmod base (- exp 1) m))
          m))))
#+end_src

“I don’t see what difference that could make,” says Louis. “I do.” says Eva. “By writing the procedure like that, you have transformed the $\theta(log n)$ process into a $\theta(n)$ process.” Explain.

** Solution
expmod will be evaluated twice for even exponents nullifying the effect of dividing the exponent by 2. In other words expmod will be evaluated n times.

* Exercise 1.27
Demonstrate that the Carmichael numbers listed in Footnote 47 really do fool the Fermat test. That is, write a procedure that takes an integer n and tests whether $a^n$ is congruent to a modulo n for every $a < n$, and try your procedure on the given Carmichael numbers.

** Solution
#+begin_src scheme
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))

(define (exaustive-fermat-test n)
  (define (exaustive-fermat-test-iter n a)
    (cond ((= n a) #t)
          ((= (expmod a n n) a)
           (exaustive-fermat-test-iter n (inc a)))
          (else #f)))
  (exaustive-fermat-test-iter n 1))

(test-assert (exaustive-fermat-test 561))
(test-assert (exaustive-fermat-test 1105))
(test-assert (exaustive-fermat-test 1729))
(test-assert (exaustive-fermat-test 2465))
(test-assert (exaustive-fermat-test 2821))
(test-assert (exaustive-fermat-test 6601))
#+end_src

* Exercise 1.28
One variant of the Fermat test that cannot be fooled is called the Miller-Rabin test (Miller 1976; Rabin 1980). This starts from an alternate form of Fermat’s Little Theorem, which states that if n is a prime number and a is any positive integer less than n, then a raised to the \((n-1)\)-st power is congruent to 1 modulo n. To test the primality of a number n by the Miller-Rabin test, we pick a random number $a < n$ and raise a to the \((n-1)\)-st power modulo n using the expmod procedure. However, whenever we perform the squaring step in expmod, we check to see if we have discovered a “nontrivial square root of 1 modulo n,” that is, a number not equal to 1 or $n-1$ whose square is equal to 1 modulo n. It is possible to prove that if such a nontrivial square root of 1 exists, then n is not prime. It is also possible to prove that if n is an odd number that is not prime, then, for at least half the numbers $a<n$, computing $a^{n-1}$ in this way will reveal a nontrivial square root of 1 modulo n. (This is why the Miller-Rabin test cannot be fooled.) Modify the expmod procedure to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller-Rabin test with a procedure analogous to fermat-test. Check your procedure by testing various known primes and non-primes. Hint: One convenient way to make expmod signal is to have it return 0.

** Solution
#+begin_src scheme
(define (guess-a n)
  (+ 1 (random (- n 1))))

(define (check-non-trivial-sqrt-mod x n m)
  (if (and
       (= x 1)
       (not (= n 1))
       (not (= n (- m 1))))
      0
      x))

(define (sqrmod-check n m)
  (check-non-trivial-sqrt-mod (remainder (square n) m) n m))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (sqrmod-check (expmod base (/ exp 2) m) m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))

(define (miller-rabin-test n)
  (= 1 (expmod (guess-a n) (- n 1) n)))

(test-assert (miller-rabin-test 11))
(test-assert (miller-rabin-test 23))
(test-assert (miller-rabin-test 100003))
(test-assert (miller-rabin-test 100019))
(test-assert (miller-rabin-test 100043))
(test-assert (miller-rabin-test 1000003))
(test-assert (miller-rabin-test 1000033))
(test-assert (miller-rabin-test 1000037))
(test-assert (miller-rabin-test 10000019))
(test-assert (miller-rabin-test 10000079))
(test-assert (miller-rabin-test 10000103))
(test-assert (miller-rabin-test 100000007))
(test-assert (miller-rabin-test 100000037))
(test-assert (miller-rabin-test 100000039))
(test-assert (not (miller-rabin-test 561)))
(test-assert (not (miller-rabin-test 1105)))
(test-assert (not (miller-rabin-test 1729)))
(test-assert (not (miller-rabin-test 2465)))
(test-assert (not (miller-rabin-test 2821)))
(test-assert (not (miller-rabin-test 6601)))
#+end_src
