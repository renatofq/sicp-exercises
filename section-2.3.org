#+TITLE: Section 2.3 Exercises

* Exercise 2.53
What would the interpreter print in response to evaluating each of the following expressions?
#+begin_src scheme :eval never
(list 'a 'b 'c)
(list (list 'george))
(cdr '((x1 x2) (y1 y2)))
(cadr '((x1 x2) (y1 y2)))
(pair? (car '(a short list)))
(memq 'red '((red shoes) (blue socks)))
(memq 'red '(red shoes blue socks))
#+end_src

#+begin_example
$1 = (a b)
$2 = ((george))
$3 = ((y1 y2))
$4 = (y1 y1)
$5 = #f
$6 = #f
$7 = (red shoes blue socks)
#+end_example

* Exercise 2.54
Two lists are said to be equal? if they contain equal elements arranged in the same order. For example,
#+begin_src scheme :eval never
(equal? '(this is a list)
        '(this is a list))
#+end_src
is true, but
#+begin_src scheme :eval never
(equal? '(this is a list)
        '(this (is a) list))
#+end_src
is false. To be more precise, we can define equal? recursively in terms of the basic eq? equality of symbols by saying that a and b are equal? if they are both symbols and the symbols are eq?, or if they are both lists such that (car a) is equal? to (car b) and (cdr a) is equal? to (cdr b). Using this idea, implement equal? as a procedure.

** Solution
#+begin_src scheme
(define (equal? a b)
  (cond ((eq? a b) #t)
        ((not (and (pair? a) (pair? b))) #f)
        (else
         (and (equal? (car a) (car b))
              (equal? (cdr a) (cdr b))))))

(test-assert (equal? '(this (is (pretty certaily) a) list)
                    '(this (is (pretty certaily) a) list)))
#+end_src

* Exercise 2.55
Eva Lu Ator types to the interpreter the expression
#+begin_src scheme :eval never
(car ''abracadabra)
#+end_src
To her surprise, the interpreter prints back quote. Explain.

** Solution
The first quote mark is equivalent to the function quote. Thus The expression "''abracadabra" is equivalent to "(quote (quote abracadabra))", which can be read as: a list with the symbols quote and abracadabra.

* Exercise 2.56
Show how to extend the basic differentiator to handle more kinds of expressions. For instance, implement the differentiation rule
\[\frac{d(u^n)}{dx} = nu^{nâˆ’1}\frac{du}{dx}\]
by adding a new clause to the deriv program and defining appropriate procedures exponentiation?, base, exponent, and make-exponentiation. (You may use the symbol ** to denote exponentiation.) Build in the rules that anything raised to the power 0 is 1 and anything raised to the power 1 is the thing itself.

** Solution
#+begin_src scheme
;; Variable
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))

;; Sum
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list '+ a1 a2))))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))

;; Product
(define (make-product m1 m2)
  (cond ((or (=number? m1 0)
             (=number? m2 0))
         0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2))
         (* m1 m2))
        (else (list '* m1 m2))))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))

;; Actual Solution ---
;; Exponentiation
(define (make-exponentiation base exponent)
  (cond ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        ((and (number? base) (number? exponent))
         (expt base exponent))
        (else (list '** base exponent))))

(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (deriv (multiplier exp) var)
           (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
          (exponent exp)
          (deriv (make-exponentiation
                  (base exp)
                  (make-sum (exponent exp) (- 1)))
                 var)))
        (else (error "unknown expression
                      type: DERIV" exp))))

(test-equal 2
  (deriv '(+ (** x 2) 2) 'x))
(test-equal 6
  (deriv '(+ (** x 3) 2) 'x))
(test-equal '(+ (* a 6) 1)
  (deriv '(+ (* a (** x 3)) x (* 2 a)) 'x))
#+end_src

* Exercise 2.57
Extend the differentiation program to handle sums and products of arbitrary numbers of (two or more) terms. Then the last example above could be expressed as
#+begin_src scheme :eval never
(deriv '(* x y (+ x 3)) 'x)
#+end_src
Try to do this by changing only the representation for sums and products, without changing the deriv procedure at all. For example, the addend of a sum would be the first term, and the augend would be the sum of the rest of the terms.

#+begin_src scheme
;; From the Book
;; Differentiation
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (deriv (multiplier exp) var)
           (multiplicand exp))))
        (else (error "unknown expression
                      type: DERIV" exp))))

;; Variables
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))

;; Sums
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list '+ a1 a2))))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))

;; Products
(define (make-product m1 m2)
  (cond ((or (=number? m1 0)
             (=number? m2 0))
         0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2))
         (* m1 m2))
        (else (list '* m1 m2))))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))

;; Actual Solution
(define (augend s)
  (let ((agnd (cddr s)))
    (if (nil? (cdr agnd))
        (car agnd)
        (cons '+ agnd))))

(define (multiplicand p)
  (let ((multcnd (cddr p)))
    (if (nil? (cdr multcnd))
        (car multcnd)
        (cons '* multcnd))))

(test-equal '(+ (* x y) (* y (+ x 3)))
  (deriv '(* x y (+ x 3)) 'x))
#+end_src

* Exercise 2.58
Suppose we want to modify the differentiation program so that it works with ordinary mathematical notation, in which + and * are infix rather than prefix operators. Since the differentiation program is defined in terms of abstract data, we can modify it to work with different representations of expressions solely by changing the predicates, selectors, and constructors that define the representation of the algebraic expressions on which the differentiator is to operate.

1. Show how to do this in order to differentiate algebraic expressions presented in infix form, such as (x + (3 * (x + (y + 2)))). To simplify the task, assume that + and * always take two arguments and that expressions are fully parenthesized.

2. The problem becomes substantially harder if we allow standard algebraic notation, such as (x + 3 * (x + y + 2)), which drops unnecessary parentheses and assumes that multiplication is done before addition. Can you design appropriate predicates, selectors, and constructors for this notation such that our derivative program still works?

** Solution
*** Fully parethesized
#+begin_src scheme
;; From the Book
;; Differentiation
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (deriv (multiplier exp) var)
           (multiplicand exp))))
        (else (error "unknown expression
                      type: DERIV" exp))))

;; Variables
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))

;; Solution
;; Sums
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list a1 '+ a2))))

(define (sum? x)
  (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) (caddr s))

;; Products
(define (make-product m1 m2)
  (cond ((or (=number? m1 0)
             (=number? m2 0))
         0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2))
         (* m1 m2))
        (else (list m1 '* m2))))

(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))

(test-equal 4
  (deriv '(x + (3 * (x + (y + 2)))) 'x))
#+end_src

*** Standard Algebraic Notation
#+begin_src scheme
;; From the Book
;; Differentiation
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (deriv (multiplier exp) var)
           (multiplicand exp))))
        (else (error "unknown expression
                      type: DERIV" exp))))

;; Variables
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))

(define (operator exp)
  (cadr exp))

(define (first-operand exp)
  (car exp))

(define (second-operand exp)
  (let ((oprnd (cddr exp)))
    (if (nil? (cdr oprnd))
        (car oprnd)
        (cons (operator exp) oprnd))))

(define (is-operation? op exp)
  (and (pair? exp)
       (eq? op (operator exp))))

(define (find-operation op exp)
  (cond ((nil? (cdr exp)) nil)
        ((is-operation? op exp) exp)
        (else (find-operation op (cddr exp)))))

;; Solution
;; Sums
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list a1 '+ a2))))

(define (sum? exp)
  (and (is-operation? '+ exp)
       (nil? (find-operation '+ (cddr exp)))))
(define (addend exp) (first-operand (find-operation '+ exp)))
(define (augend exp) (second-operand (find-operation '+ exp)))

;; Products
(define (make-product m1 m2)
  (cond ((or (=number? m1 0)
             (=number? m2 0))
         0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2))
         (* m1 m2))
        (else (list m1 '* m2))))

(define (product? exp)
  (not (nil? (find-operation '* exp))))
(define (multiplier exp) (first-operand (find-operation '* exp)))
(define (multiplicand exp) (second-operand (find-operation '* exp)))

(test-equal 4
  (deriv '(x + 3 * (x + (y + 2))) 'x))
#+end_src
