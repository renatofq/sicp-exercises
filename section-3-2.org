#+TITLE: 3.2 Exercises

* Exercise 3.9
In 1.2.1 we used the substitution model to analyze two procedures for computing factorials, a recursive version

#+begin_src scheme :eval never
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
#+end_src

and an iterative version

#+begin_src scheme :eval never
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product
                   counter
                   max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
#+end_src

Show the environment structures created by evaluating (factorial 6) using each version of the factorial procedure.142

** Solution
*** Recursive
[[file:annex/3_9-recursive.png]]

*** Iterative
[[file:annex/3_9-iterative.png]]

* TODO Exercise 3.10
In the make-withdraw procedure, the local variable balance is created as a parameter of make-withdraw.  We could also create the local state variable explicitly, using let, as follows:

#+begin_src scheme :eval never
(define (make-withdraw initial-amount)
  (let ((balance initial-amount))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance
                       (- balance amount))
                 balance)
          "Insufficient funds"))))
#+end_src

Recall from 1.3.2 that let is simply syntactic sugar for a procedure call:

#+begin_src scheme :eval never
(let ((⟨var⟩ ⟨exp⟩)) ⟨body⟩)
#+end_src

is interpreted as an alternate syntax for

#+begin_src scheme :eval never
((lambda (⟨var⟩) ⟨body⟩) ⟨exp⟩)
#+end_src

Use the environment model to analyze this alternate version of make-withdraw, drawing figures like the ones above to illustrate the interactions

#+begin_src scheme :eval never
(define W1 (make-withdraw 100))
(W1 50)
(define W2 (make-withdraw 100))
#+end_src

Show that the two versions of make-withdraw create objects with the same behavior.  How do the environment structures differ for the two versions?

* TODO Exercise 3.11
In 3.2.3 we saw how the environment model described the behavior of procedures with local state. Now we have seen how internal definitions work.  A typical message-passing procedure contains both of these aspects.  Consider the bank account procedure of 3.1.1:

#+begin_src scheme :eval never
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance
                     (- balance
                        amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request:
                        MAKE-ACCOUNT"
                       m))))
  dispatch)
#+end_src

Show the environment structure generated by the sequence of interactions

#+begin_example
(define acc (make-account 50))

((acc 'deposit) 40)
90

((acc 'withdraw) 60)
30
#+end_example

Where is the local state for acc kept?  Suppose we define another account

#+begin_src scheme :eval never
(define acc2 (make-account 100))
#+end_src

How are the local states for the two accounts kept distinct?  Which parts of the environment structure are shared between acc and acc2?
