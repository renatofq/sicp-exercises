#+TITLE: Chapter 2 Exercises

* Exercise 2.1
Define a better version of make-rat that handles both positive and negative arguments. Make-rat should normalize the sign so that if the rational number is positive, both the numerator and denominator are positive, and if the rational number is negative, only the numerator is negative.

** Solution
#+begin_src scheme
(define (make-rat n d)
  (define (normalize-numerator-signal n d)
  (if (< (* n d) 0)
      (* (- 1) (abs n))
      (abs n)))
  (let* ((nsn (normalize-numerator-signal n d))
        (nsd (abs d))
        (gcd-of-n-and-d (abs (gcd nsn nsd))))
    (cons
     (/ nsn gcd-of-n-and-d)
     (/ nsd gcd-of-n-and-d))))

(test-equal 1     (numer (make-rat 1 3)))
(test-equal (- 1) (numer (make-rat 1 (- 3))))
(test-equal (- 1) (numer (make-rat (- 1) 3)))
(test-equal 1     (numer (make-rat (- 1) (- 3))))

(test-equal 3 (denom (make-rat 1 3)))
(test-equal 3 (denom (make-rat 1 (- 3))))
(test-equal 3 (denom (make-rat (- 1) 3)))
(test-equal 3 (denom (make-rat (- 1) (- 3))))
#+end_src

* Exercise 2.2
Consider the problem of representing line segments in a plane. Each segment is represented as a pair of points: a starting point and an ending point. Define a constructor make-segment and selectors start-segment and end-segment that define the representation of segments in terms of points. Furthermore, a point can be represented as a pair of numbers: the x coordinate and the y coordinate. Accordingly, specify a constructor make-point and selectors x-point and y-point that define this representation. Finally, using your selectors and constructors, define a procedure midpoint-segment that takes a line segment as argument and returns its midpoint (the point whose coordinates are the average of the coordinates of the endpoints). To try your procedures, you’ll need a way to print points:
#+begin_src scheme :eval never
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
#+end_src

** Solution
#+begin_src scheme
;; point abstraction
(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

;; segment abstraction
(define (make-segment start end)
  (cons start end))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (midpoint-segment segment)
  (make-point
   (average (x-point (start-segment segment))
            (x-point (end-segment segment)))
   (average (y-point (start-segment segment))
            (y-point (end-segment segment)))))

(print-point (midpoint-segment (make-segment (make-point 0 0)
                                             (make-point 8 8))))
#+end_src

* Exercise 2.3
Implement a representation for rectangles in a plane. (Hint: You may want to make use of Exercise 2.2.) In terms of your constructors and selectors, create procedures that compute the perimeter and the area of a given rectangle. Now implement a different representation for rectangles. Can you design your system with suitable abstraction barriers, so that the same perimeter and area procedures will work using either representation?

** Solution
*** Two point based rectangle
#+begin_src scheme
;; from 2.2
(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))

;; constructor and selectors
(define (make-rectangle a b)
  (cons a b))
(define (rectangle-height r)
  (abs (-
        (y-point (car r))
        (y-point (cdr r)))))
(define (rectangle-width r)
  (abs (-
        (x-point (car r))
        (x-point (cdr r)))))

;; area and perimeter
(define (rectangle-area r)
  (*
   (rectangle-height r)
   (rectangle-width r)))
(define (rectangle-perimeter r)
  (+
   (* 2 (rectangle-height r))
   (* 2 (rectangle-width r))))

;; tests
(define unitary-rectangle
  (make-rectangle
   (make-point 0 0)
   (make-point 1 1)))

(define phi 1.618033988749)
(define golden-rectangle
  (make-rectangle
   (make-point 0 0)
   (make-point 1 phi)))

(test-equal 1 (rectangle-area unitary-rectangle))
(test-equal 4 (rectangle-perimeter unitary-rectangle))

(test-equal phi (rectangle-area golden-rectangle))
(test-approximate
    (+ 2 (* 2 phi))
    (rectangle-perimeter golden-rectangle)
    0.00000000001)
#+end_src

*** Point, width and height based rectangle
#+begin_src scheme
;; from 2.2
(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))

;; constructor and selectors
(define (make-rectangle a w h)
  (cons a (cons w h)))
(define (rectangle-width r)
  (car (cdr r)))
(define (rectangle-height r)
  (cdr (cdr r)))

;; area and perimeter. Same as before
(define (rectangle-area r)
  (*
   (rectangle-height r)
   (rectangle-width r)))
(define (rectangle-perimeter r)
  (+
   (* 2 (rectangle-height r))
   (* 2 (rectangle-width r))))

;; tests
(define unitary-rectangle
  (make-rectangle (make-point 0 0) 1 1))

(define phi 1.618033988749)
(define golden-rectangle
  (make-rectangle (make-point 0 0) 1 phi))

(test-equal 1 (rectangle-area unitary-rectangle))
(test-equal 4 (rectangle-perimeter unitary-rectangle))

(test-equal phi (rectangle-area golden-rectangle))
(test-approximate
    (+ 2 (* 2 phi))
    (rectangle-perimeter golden-rectangle)
    0.00000000001)
#+end_src

* Exercise 2.4
Here is an alternative procedural representation of pairs. For this representation, verify that (car (cons x y)) yields x for any objects x and y.
#+begin_src scheme :eval never
(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))
#+end_src
What is the corresponding definition of cdr? (Hint: To verify that this works, make use of the substitution model of 1.1.5.)

** Solution
#+begin_src scheme
;; from exercise formulation
(define (cons x y)
  (lambda (m) (m x y)))

;; cdr
(define (cdr z)
  (z (lambda (p q) q)))

;; test
(test-equal 2 (cdr (cons 1 2)))
#+end_src

Substitution:
#+begin_example
> (cdr (cons 1 2))
> (cdr (lambda (m) (m 1 2)))
> (((lambda (m) (m 1 2)) (lambda (p q) q)))
> ((lambda (p q) q) 1 2)
$1 = 2
#+end_example

* Exercise 2.5
Show that we can represent pairs of nonnegative integers using only numbers and arithmetic operations if we represent the pair $a$ and $b$ as the integer that is the product $2^a3^b$. Give the corresponding definitions of the procedures cons, car, and cdr.

** Solution
#+begin_src scheme
(define (cons a b)
  (* (expt 2 a) (expt 3 b)))

(define (factored-by factor n)
    (define (iter n count)
      (if (not (= (remainder n factor) 0))
          count
          (iter (/ n factor) (+ count 1))))
    (iter n 0))

(define (car pair)
  (factored-by 2 pair))
(define (cdr pair)
  (factored-by 3 pair))

(test-equal 1 (car 2))
(test-equal 0 (cdr 2))
(test-equal 0 (car 3))
(test-equal 1 (cdr 3))

(define n (cons 2 3))
(test-equal 2 (car n))
(test-equal 3 (cdr n))

(define m (cons 4 4))
(test-equal 4 (car m))
(test-equal 4 (cdr m))
#+end_src

* Exercise 2.6
In case representing pairs as procedures wasn’t mind-boggling enough, consider that, in a language that can manipulate procedures, we can get by without numbers (at least insofar as nonnegative integers are concerned) by implementing 0 and the operation of adding 1 as
#+begin_src scheme :eval never
(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
#+end_src
This representation is known as Church numerals, after its inventor, Alonzo Church, the logician who invented the λ-calculus.
Define one and two directly (not in terms of zero and add-1). (Hint: Use substitution to evaluate (add-1 zero)). Give a direct definition of the addition procedure + (not in terms of repeated application of add-1).

** Solution
#+begin_example
> (define one (add-1 zero))
> (define one (add-1 (lambda (f) (lambda (x) x))))
> (define one (lambda (f)
                (lambda (x)
                  (f (((lambda (f) (lambda (x) x)) f) x)))))
> (define one (lambda (f) (lambda (x) (f ((lambda (x) x) x)))))
> (define one (lambda (f) (lambda (x) (f x))))

> (define two (add-1 one))
> (define two (add-1 (lambda (f) (lambda (x) (f x)))))
> (define two (lambda (f)
                (lambda (x)
                  (f (((lambda (f) (lambda (x) (f x))) f) x)))))
> (define two (lambda (f) (lambda (x) (f ((lambda (x) (f x)) x)))))
> (define two (lambda (f) (lambda (x) (f (f x)))))
#+end_example


#+begin_src scheme
;; Church's numerals are functions that receives a function f and returns
;; another function that receives x. is in the domain of f.
;; The numeral zero is the function that maps f to the identity function.
(define zero (lambda (f) (lambda (x) x)))

;; add-1 is the function that maps a Church's numeral, n, to another
;; numeral. It does so by composing f to the result of f applyed to n,
;; applyed to x. f(n(f)(x)) in standard mathematical notation.
;; By this definition, one and two are the following compositions, as
;; shown above.
(define one  (lambda (f) (lambda (x) (f x))))
(define two  (lambda (f) (lambda (x) (f (f x)))))

;; + is the function that maps two Church's numerals, n and m, to another
;; Church's numeral. Therefore, it's result is a function that receives a
;; function f and returns a function of x. This resulting fuction is
;; computed by composing n(f), to the result of m(f)(x). This translates
;; n(f)(m(f)(x)).
;; Applying f m times and subsequentially f n times to it's result, is
;; equivalent to applying f n+m times.
(define (+ n m)
  (lambda (f)
    (lambda (x)
      ((n f) ((m f) x)))))

;; tests
(test-equal 1 ((one inc) 0))                 ;; inc(0)
(test-equal 1 (((+ one zero) inc) 0))        ;; inc(0)
(test-equal 2 (((+ one one) inc) 0))         ;; inc(inc(0))

(test-equal 2 ((two inc) 0))                 ;; inc(inc(0))
(test-equal 2 (((+ two zero) inc) 0))        ;; inc(inc(0))
(test-equal 3 (((+ two one) inc) 0))         ;; inc(inc(inc(0)))

(test-equal 5 (((+ one (+ two two)) inc) 0)) ;; inc(inc(inc(inc(inc(0)))))

(define (double n) (* 2 n))
(test-equal
    (expt 2 4)
  (((+ two two) double) 1)) ;; double(double(double(double(1))))
#+end_src

* Exercise 2.17
Define a procedure last-pair that returns the list that contains only the last element of a given (nonempty) list:
#+begin_src scheme :eval never
(last-pair (list 23 72 149 34))
(34)
#+end_src

** Solution
#+begin_src scheme
(define (last-pair l)
  (let ((next (cdr l)))
    (if (null? next)
        l
        (last-pair next))))

(test-equal (list 34) (last-pair (list 23 72 149 34)))
#+end_src

* Exercise 2.18
Define a procedure reverse that takes a list as argument and returns a list of the same elements in reverse order:
#+begin_src scheme :eval never
(reverse (list 1 4 9 16 25))
(25 16 9 4 1)
#+end_src

** Solution
#+begin_src scheme
(define (reverse l)
  (define (iter l result)
    (if (null? l)
        result
        (iter (cdr l) (cons (car l) result))))
    (iter l nil))

(test-equal
  (list 25 16 9 4 1)
  (reverse (list 1 4 9 16 25)))
#+end_src

* meta :noexport:
#+PROPERTY: header-args :results output
#+OPTIONS: todo:nil toc:nil num:nil
# Local Variables:
# eval: (olivetti-mode 1)
# eval: (flyspell-mode 1)
# ispell-local-dictionary: "american"
# eval: (advice-add
#        'org-babel-insert-result
#        :filter-args
#        (lambda (args)
#          (let ((result (car args))
#                (result-params (cadr args))
#                (others (cddr args)))
#            (apply 'list
#                   result
#                   (if (or
#                        (string-empty-p result) (not result))
#                       (progn (org-babel-remove-result) '("silent"))
#                     result-params)
#                   others))))
# eval: (add-hook 'geiser-repl-startup-hook
#        (lambda ()
#          (geiser-load-file "chapter-2-defs.scm")))
# End:
